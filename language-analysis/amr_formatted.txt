Caption: an old person kisses a young person
# ::snt an old person kisses a young person
(k / kiss-01
      :ARG0 (p / person
            :mod (o / old))
      :ARG1 (p2 / person
            :mod (y / young)))

Caption: a young person kisses an old person
# ::snt a young person kisses an old person
(k / kiss-01
      :ARG0 (p / person
            :mod (y / young))
      :ARG1 (p2 / person
            :mod (o / old)))

Caption: the taller person hugs the shorter person
# ::snt the taller person hugs the shorter person
(h / hug-01
      :ARG0 (p / person
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (t / tall)
                  :ARG3 (m / more)))
      :ARG1 (p2 / person
            :ARG1-of (h3 / have-degree-91
                  :ARG2 (s / short-07
                        :ARG1 p2)
                  :ARG3 (m2 / more))))

Caption: the shorter person hugs the taller person
# ::snt the shorter person hugs the taller person
(h / hug-01
      :ARG0 (p / person
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (s / short-07
                        :ARG1 p)
                  :ARG3 (m / more)))
      :ARG1 (p2 / person
            :ARG1-of (h3 / have-degree-91
                  :ARG2 (t / tall)
                  :ARG3 (m2 / more))))

Caption: the masked wrestler hits the unmasked wrestler
# ::snt the masked wrestler hits the unmasked wrestler
(h / hit-01
      :ARG0 (w / wrestler
            :ARG1-of (m / mask-01))
      :ARG1 (p / person
            :ARG1-of (u / unmask-01)
            :ARG0-of (w2 / wrestle-01)))

Caption: the unmasked wrestler hits the masked wrestler
# ::snt the unmasked wrestler hits the masked wrestler
(h / hit-01
      :ARG0 (p / person
            :ARG0-of (w / wrestle-01)
            :ARG1-of (m / mask-01
                  :polarity -))
      :ARG1 (p2 / person
            :ARG0-of w)
      :ARG1-of (m2 / mask-01))

Caption: a person watches an animal
# ::snt a person watches an animal
(w / watch-01
      :ARG0 (p / person)
      :ARG1 (a / animal))

Caption: an animal watches a person
# ::snt an animal watches a person
(w / watch-01
      :ARG0 (a / animal)
      :ARG1 (p / person))

Caption: the person without earrings pays the person with earrings
# ::snt the person without earrings pays the person with earrings
(p / pay-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-03
                  :polarity -
                  :ARG1 (e / earring)))
      :ARG2 (p3 / person
            :ARG0-of (h2 / have)))

Caption: the person with earrings pays the person without earrings
# ::snt the person with earrings pays the person without earrings
(p / pay-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-03
                  :ARG1 (e / earring)))
      :ARG2 (p3 / person
            :ARG0-of (h2 / have-03
                  :polarity -
                  :ARG1 (e2 / earring))))

Caption: a bird eats a snake
# ::snt a bird eats a snake
(e / eat-01
      :ARG0 (b / bird)
      :ARG1 (s / snake))

Caption: a snake eats a bird
# ::snt a snake eats a bird
(e / eat-01
      :ARG0 (s / snake)
      :ARG1 (b / bird))

Caption: a plant was harmed by another organism, and that organism broke the plant into pieces
# ::snt a plant was harmed by another organism, and that organism broke the plant into pieces
(a / and
      :op1 (h / harm-01
            :ARG0 (o / organism
                  :mod (a2 / another))
            :ARG1 (p / plant))
      :op2 (b / break-up-08
            :ARG0 o
            :ARG1 p
            :ARG2 (p2 / piece)))

Caption: another organism was harmed by a plant, and that plant broke the organism into pieces
# ::snt another organism was harmed by a plant, and that plant broke the organism into pieces
(a / and
      :op1 (h / harm-01
            :ARG0 (p / plant)
            :ARG1 (o / organism
                  :mod (a2 / another)))
      :op2 (b / break-up-08
            :ARG0 p
            :ARG1 o
            :ARG2 (p2 / piece)))

Caption: a bottle is in water
# ::snt a bottle is in water
(b / be-located-at-91
      :ARG1 (b2 / bottle)
      :ARG2 (w / water))

Caption: water is in a bottle
# ::snt water is in a bottle
(w / water
      :location (b / bottle))

Caption: a tree smashed into a car
# ::snt a tree smashed into a car
(s / smash-01
      :ARG0 (t / tree)
      :ARG1 (c / car))

Caption: a car smashed into a tree
# ::snt a car smashed into a tree
(s / smash-01
      :ARG1 (c / car)
      :ARG2 (t / tree))

Caption: people fall on the leaves
# ::snt people fall on the leaves
(f / fall-01
      :ARG1 (p / person)
      :ARG4 (l / leaf))

Caption: the leaves fall on people
# ::snt the leaves fall on people
(f / fall-01
      :ARG1 (l / leaf)
      :ARG4 (p / person))

Caption: the sail rests below the water
# ::snt the sail rests below the water
(r / rest-01
      :ARG1 (s / sail)
      :location (b / below
            :op1 (w / water)))

Caption: the water rests below the sail
# ::snt the water rests below the sail
(r / rest-01
      :ARG1 (w / water)
      :location (b / below
            :op1 (s / sail-01)))

Caption: there is a table below someone
# ::snt there is a table below someone
(t / table
      :location (b / below
            :op1 (s / someone)))

Caption: there is someone below a table
# ::snt there is someone below a table
(s / someone
      :location (b / below
            :op1 (t / table)))

Caption: the image shows a computer on top of books
# ::snt the image shows a computer on top of books
(s / show-01
      :ARG0 (ii / image)
      :ARG1 (c / computer
            :location (t / top
                  :op1 (b / book))))

Caption: the image shows books on top of a computer
# ::snt the image shows books on top of a computer
(s / show-01
      :ARG0 (ii / image)
      :ARG1 (b / book
            :location (t / top
                  :part-of (c / computer))))

Caption: a caterpillar with some plants
# ::snt a caterpillar with some plants
(c / caterpillar
      :accompanier (p / plant
            :quant (s / some)))

Caption: a plant with some caterpillars
# ::snt a plant with some caterpillars
(p / plant
      :ARG0-of (h / have-03
            :ARG1 (c / caterpillar
                  :quant (s / some))))

Caption: there is a mug in some grass
# ::snt there is a mug in some grass
(m / mug
      :location (g / grass
            :mod (s / some)))

Caption: there is some grass in a mug
# ::snt there is some grass in a mug
(g / grass
      :quant (s / some)
      :location (m / mug))

Caption: there are more skiers than snowboarders
# ::snt there are more skiers than snowboarders
(h / have-quant-91
      :ARG1 (p / person
            :ARG0-of (s / ski-01))
      :ARG3 (m / more)
      :ARG4 (p2 / person
            :ARG0-of s))

Caption: there are more snowboarders than skiers
# ::snt there are more snowboarders than skiers
(h / have-quant-91
      :ARG1 (p / person
            :ARG0-of (s / ski-01
                  :ARG1 (s2 / snow)))
      :ARG3 (m / more)
      :ARG4 (p2 / person
            :ARG0-of (s3 / ski-01)))

Caption: there are fewer forks than spoons
# ::snt there are fewer forks than spoons
(f / fork
      :ARG1-of (h / have-quant-91
            :ARG3 (l / less)
            :ARG4 (s / spoon)))

Caption: there are fewer spoons than forks
# ::snt there are fewer spoons than forks
(h / have-quant-91
      :ARG1 (s / spoon)
      :ARG3 (l / less)
      :ARG4 (f / fork))

Caption: there are more ladybugs than flowers
# ::snt there are more ladybugs than flowers
(l / ladybug
      :ARG1-of (h / have-quant-91
            :ARG3 (m / more)
            :ARG4 (f / flower)))

Caption: there are more flowers than ladybugs
# ::snt there are more flowers than ladybugs
(h / have-quant-91
      :ARG1 (f / flower)
      :ARG3 (m / more)
      :ARG4 (l / ladybug))

Caption: there is less orange juice than milk
# ::snt there is less orange juice than milk
(h / have-quant-91
      :ARG1 (j / juice
            :source (o / orange))
      :ARG3 (l / less)
      :ARG4 (m / milk))

Caption: there is less milk than orange juice
# ::snt there is less milk than orange juice
(h / have-quant-91
      :ARG1 (m / milk)
      :ARG3 (l / less)
      :ARG4 (j / juice
            :source (o / orange)))

Caption: there is more dirt than empty space in the jar
# ::snt there is more dirt than empty space in the jar
(h / have-quant-91
      :ARG1 (d / dirt
            :location (j / jar))
      :ARG3 (m / more)
      :ARG4 (s / space
            :ARG1-of (e / empty-02)))

Caption: there is more empty space than dirt in the jar
# ::snt there is more empty space than dirt in the jar
(h / have-quant-91
      :ARG1 (s / space
            :ARG1-of (e / empty-02)
            :location (j / jar))
      :ARG3 (m / more)
      :ARG4 (d / dirt
            :location j))

Caption: there is a bit less milk chocolate than white chocolate
# ::snt there is a bit less milk chocolate than white chocolate
(h / have-quant-91
      :ARG1 (c / chocolate
            :mod (m / milk))
      :ARG3 (l / less
            :quant (b / bit))
      :ARG4 (c2 / chocolate
            :ARG1-of (w / white-03)))

Caption: there is a bit less white chocolate than milk chocolate
# ::snt there is a bit less white chocolate than milk chocolate
(h / have-quant-91
      :ARG1 (c / chocolate
            :ARG1-of (w / white-03))
      :ARG3 (l / less
            :quant (b / bit))
      :ARG4 (c2 / chocolate
            :mod (m / milk)))

Caption: a person sits and a dog stands
# ::snt a person sits and a dog stands
(a / and
      :op1 (s / sit-01
            :ARG1 (p / person))
      :op2 (s2 / stand-01
            :ARG0 (d / dog)))

Caption: a person stands and a dog sits
# ::snt a person stands and a dog sits
(a / and
      :op1 (s / stand-01
            :ARG1 (p / person))
      :op2 (s2 / sit-01
            :ARG1 (d / dog)))

Caption: The person with more facial hair lies awake while the other sleeps
# ::snt The person with more facial hair lies awake while the other sleeps
(l / lie-07
      :ARG1 (p / person
            :ARG0-of (h / have-03
                  :ARG1 (h2 / hair
                        :location (f / face)
                        :quant (m / more))))
      :ARG2 (a / awake)
      :time (s / sleep-01
            :ARG0 (p2 / person
                  :mod (o / other))))

Caption: The person with more facial hair sleeps while the other lies awake
# ::snt The person with more facial hair sleeps while the other lies awake
(c / contrast-01
      :ARG1 (s / sleep-01
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :location (f / face)
                              :quant (m / more)))))
      :ARG2 (l / lie-07
            :ARG1 (p2 / person
                  :mod (o / other))
            :ARG2 (a / awake)))

Caption: the person in the middle is floating and some others are standing
# ::snt the person in the middle is floating and some others are standing
(a / and
      :op1 (f / float-01
            :ARG1 (p / person
                  :location (m / middle)))
      :op2 (s / stand-01
            :ARG1 (p2 / person
                  :mod (o / other)
                  :quant (s2 / some))))

Caption: the person in the middle is standing and some others are floating
# ::snt the person in the middle is standing and some others are floating
(a / and
      :op1 (s / stand-01
            :ARG1 (p / person
                  :location (m / middle)))
      :op2 (f / float-01
            :ARG1 (p2 / person
                  :mod (o / other)
                  :quant (s2 / some))))

Caption: the person closer to the camera weightlifts and the person farther from the camera runs
# ::snt the person closer to the camera weightlifts and the person farther from the camera runs
(a / and
      :op1 (l / lift-01
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (c / close-10
                              :ARG1 p
                              :ARG2 (c2 / camera))
                        :ARG3 (m / more)))
            :ARG1 c2)
      :op2 (r / run-02
            :ARG0 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (f / far
                              :source c2)
                        :ARG3 (m2 / more)))))

Caption: the person closer to the camera runs and the person farther from the camera weightlifts
# ::snt the person closer to the camera runs and the person farther from the camera weightlifts
(a / and
      :op1 (r / run-02
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (c / close-10
                              :ARG1 p
                              :ARG2 (c2 / camera))
                        :ARG3 (m / more))))
      :op2 (l / lift-01
            :ARG0 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (f / far
                              :source c2)
                        :ARG3 (m2 / more)))
            :ARG1 (w / weight)))

Caption: the person with the white collared shirt waters the plant while the other holds it
# ::snt the person with the white collared shirt waters the plant while the other holds it
(w / water-01
      :ARG0 (p / person
            :ARG0-of (h / have-03
                  :ARG1 (s / shirt
                        :ARG1-of (c / collar-01
                              :ARG1-of (w2 / white-03)))))
      :ARG1 (p2 / plant)
      :time (h2 / hold-01
            :ARG0 (p3 / person
                  :mod (o / other))
            :ARG1 p2))

Caption: the person with the white collared shirt holds the plant while the other waters it
# ::snt the person with the white collared shirt holds the plant while the other waters it
(c / contrast-01
      :ARG1 (h / hold-01
            :ARG0 (p / person
                  :ARG0-of (w / wear-01
                        :ARG1 (s / shirt
                              :ARG1-of (w2 / white-03)
                              :ARG1-of (c2 / collar-01))))
            :ARG1 (p2 / plant))
      :ARG2 (w3 / water-01
            :ARG0 (p3 / person
                  :mod (o / other))
            :ARG1 p2))

Caption: the taller person chops food and the shorter person eats food
# ::snt the taller person chops food and the shorter person eats food
(a / and
      :op1 (c / chop-03
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (t / tall)
                        :ARG3 (m / more)))
            :ARG1 (f / food))
      :op2 (e / eat-01
            :ARG0 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s / short-07
                              :ARG1 p2)
                        :ARG3 (m2 / more)))
            :ARG1 f))

Caption: the taller person eats food and the shorter person chops food
# ::snt the taller person eats food and the shorter person chops food
(a / and
      :op1 (e / eat-01
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (t / tall)
                        :ARG3 (m / more)))
            :ARG1 (f / food))
      :op2 (c / chop-01
            :ARG0 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s / short-07
                              :ARG1 p2)
                        :ARG3 (m2 / more)))
            :ARG1 f))

Caption: the person with the ponytail packs stuff and other buys it
# ::snt the person with the ponytail packs stuff and other buys it
(a / and
      :op1 (p / pack-01
            :ARG0 (p2 / person
                  :mod (p3 / ponytail))
            :ARG1 (s / stuff))
      :op2 (b / buy-01
            :ARG0 (p4 / person
                  :mod (o / other))
            :ARG1 s))

Caption: the person with the ponytail buys stuff and other packs it
# ::snt the person with the ponytail buys stuff and other packs it
(a / and
      :op1 (b / buy-01
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (p2 / ponytail)))
            :ARG1 (s / stuff))
      :op2 (p3 / pack-01
            :ARG0 (o / other)
            :ARG1 s))

Caption: a person walking in a field of yellow flowers with a red dress
# ::snt a person walking in a field of yellow flowers with a red dress
(p / person
      :ARG0-of (w / walk-01
            :ARG2 (f / field
                  :consist-of (f2 / flower
                        :ARG1-of (y / yellow-02))))
      :ARG0-of (w2 / wear-01
            :ARG1 (d / dress
                  :ARG1-of (r / red-02))))

Caption: a person walking in a field of red flowers with a yellow dress
# ::snt a person walking in a field of red flowers with a yellow dress
(p / person
      :ARG0-of (w / walk-01
            :ARG2 (f / field
                  :consist-of (f2 / flower
                        :ARG1-of (r / red-02))))
      :ARG0-of (w2 / wear-01
            :ARG1 (d / dress
                  :mod (y / yellow))))

Caption: a brown dog is on a white couch
# ::snt a brown dog is on a white couch
(b / be-located-at-91
      :ARG1 (d / dog
            :mod (b2 / brown))
      :ARG2 (c / couch
            :ARG1-of (w / white-03)))

Caption: a white dog is on a brown couch
# ::snt a white dog is on a brown couch
(d / dog
      :ARG1-of (w / white-03)
      :location (c / couch
            :mod (b / brown)))

Caption: a blue bird is next to a red berry
# ::snt a blue bird is next to a red berry
(n / next-to
      :op1 (b / bird
            :mod (b2 / blue))
      :op2 (b3 / berry
            :ARG1-of (r / red-02)))

Caption: a red bird is next to a blue berry
# ::snt a red bird is next to a blue berry
(n / next-to
      :op1 (b / bird
            :ARG1-of (r / red-02))
      :op2 (b2 / berry
            :mod (b3 / blue)))

Caption: The red book is above the yellow book and below the blue book
# ::snt The red book is above the yellow book and below the blue book
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (b2 / book
                  :ARG1-of (r / red-02))
            :ARG2 (a2 / above
                  :op1 (b3 / book
                        :mod (y / yellow))))
      :op2 (b4 / be-located-at-91
            :ARG1 b2
            :ARG2 (b5 / below
                  :op1 (b6 / book
                        :mod (b7 / blue)))))

Caption: The yellow book is above the blue book and below the red book
# ::snt The yellow book is above the blue book and below the red book
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (b2 / book
                  :mod (y / yellow))
            :ARG2 (a2 / above
                  :op1 (b3 / book
                        :mod (b4 / blue))))
      :op2 (b5 / be-located-at-91
            :ARG1 b2
            :ARG2 (b6 / below
                  :op1 (b7 / book
                        :mod (r / red)))))

Caption: astronauts in blue suits with a red planet in the background
# ::snt astronauts in blue suits with a red planet in the background
(a / astronaut
      :ARG0-of (w / wear-01
            :ARG1 (s / suit
                  :mod (b / blue)))
      :location (b2 / background
            :mod (p / planet
                  :ARG1-of (r / red-02))))

Caption: astronauts in red suits with a blue planet in the background
# ::snt astronauts in red suits with a blue planet in the background
(a / astronaut
      :ARG0-of (w / wear-01
            :ARG1 (s / suit
                  :ARG1-of (r / red-02)))
      :location (b / background
            :mod (p / planet
                  :mod (b2 / blue))))

Caption: the square table has a round base
# ::snt the square table has a round base
(h / have-03
      :ARG0 (t / table
            :mod (s / square))
      :ARG1 (b / base
            :ARG1-of (r / round-03)))

Caption: the round table has a square base
# ::snt the round table has a square base
(h / have-03
      :ARG0 (t / table
            :ARG1-of (r / round-04))
      :ARG1 (b / base
            :mod (s / square)))

Caption: pointy bushes are behind rectangular bushes
# ::snt pointy bushes are behind rectangular bushes
(b / be-located-at-91
      :ARG1 (b2 / bush
            :mod (p / pointy))
      :ARG2 (b3 / behind
            :op1 (b4 / bush
                  :mod (r / rectangular))))

Caption: rectangular bushes are behind pointy bushes
# ::snt rectangular bushes are behind pointy bushes
(b / be-located-at-91
      :ARG1 (b2 / bush
            :mod (r / rectangle))
      :ARG2 (b3 / behind
            :op1 (b4 / bush
                  :mod (p / pointy))))

Caption: a circular sign is above a rectangular sign
# ::snt a circular sign is above a rectangular sign
(b / be-located-at-91
      :ARG1 (s / sign
            :mod (c / circular))
      :ARG2 (a / above
            :op1 (s2 / sign
                  :mod (r / rectangular))))

Caption: a rectangular sign is above a circular sign
# ::snt a rectangular sign is above a circular sign
(b / be-located-at-91
      :ARG1 (s / sign
            :mod (r / rectangular))
      :ARG2 (a / above
            :op1 (s2 / sign
                  :mod (c / circular))))

Caption: a wood chess piece rests on metal objects
# ::snt a wood chess piece rests on metal objects
(r / rest-01
      :ARG1 (p / piece
            :mod (c / chess)
            :consist-of (w / wood))
      :ARG2 (o / object
            :mod (m / metal)))

Caption: a metal chess piece rests on wood objects
# ::snt a metal chess piece rests on wood objects
(r / rest-01
      :ARG1 (p / piece
            :mod (c / chess)
            :consist-of (m / metal))
      :ARG2 (o / object
            :consist-of (w / wood)))

Caption: soft shoes are on a smooth floor
# ::snt soft shoes are on a smooth floor
(b / be-located-at-91
      :ARG1 (s / shoe
            :ARG1-of (s2 / soft-02))
      :ARG2 (f / floor
            :ARG1-of (s3 / smooth-04)))

Caption: smooth shoes are on a soft floor
# ::snt smooth shoes are on a soft floor
(s / shoe
      :ARG1-of (s2 / smooth-04)
      :location (f / floor
            :ARG1-of (s3 / soft-02)))

Caption: the happy person is on the right and the sad person is on the left
# ::snt the happy person is on the right and the sad person is on the left
(a / and
      :op1 (r / right-08
            :ARG1 (p / person
                  :ARG1-of (h / happy-01)))
      :op2 (l / left-19
            :ARG1 (p2 / person
                  :ARG1-of (s / sad-02))))

Caption: the sad person is on the right and the happy person is on the left
# ::snt the sad person is on the right and the happy person is on the left
(a / and
      :op1 (p / person
            :ARG1-of (s / sad-02)
            :location (r / right-08))
      :op2 (p2 / person
            :ARG1-of (h / happy-01)
            :location (l / left-19)))

Caption: the hurt person is on the left and the helpful person is on the right
# ::snt the hurt person is on the left and the helpful person is on the right
(a / and
      :op1 (l / left-19
            :ARG1 (p / person
                  :ARG1-of (h / hurt-02)))
      :op2 (r / right-08
            :ARG1 (p2 / person
                  :ARG0-of (h2 / helpful-04))))

Caption: the helpful person is on the left and the hurt person is on the right
# ::snt the helpful person is on the left and the hurt person is on the right
(a / and
      :op1 (l / left-19
            :ARG1 (p / person
                  :ARG0-of (h / helpful-04)))
      :op2 (r / right-08
            :ARG1 (p2 / person
                  :ARG1-of (h2 / hurt-02))))

Caption: the more content person has the healthier food and the less content person has the less healthy food
# ::snt the more content person has the healthier food and the less content person has the less healthy food
(a / and
      :op1 (c / correlate-91
            :ARG1 (m / more
                  :ARG3-of (h / have-quant-91
                        :ARG1 (p / person
                              :ARG0-of (c2 / content-02))
                        :ARG1 (f / food)))
            :ARG2 m
            :ARG3-of (h2 / have-quant-91
                  :ARG1 (f2 / food)
                  :ARG3 m))
      :op2 (c3 / correlate-91
            :ARG1 (l / less
                  :ARG3-of (h3 / have-quant-91
                        :ARG1 (f3 / food
                              :ARG1-of (h4 / have-quant-91
                                    :ARG3 l)))))
      :ARG2 m)

Caption: the less content person has the healthier food and the more content person has the less healthy food
# ::snt the less content person has the healthier food and the more content person has the less healthy food
(a / and
      :op1 (c / correlate-91
            :ARG1 (l / less
                  :ARG3-of (h / have-quant-91
                        :ARG1 (p / person
                              :ARG0-of (c2 / content-02)
                              :ARG1-of c2)
                        :ARG3 (m / more)))
            :ARG2 (m2 / more
                  :ARG3-of (h2 / have-quant-91
                        :ARG1 (f / food
                              :mod (h3 / healthy))
                        :ARG3 (l2 / less))))
      :op2 (c3 / correlate-91
            :ARG1 (m3 / more
                  :ARG3-of (h4 / have-quant-91
                        :ARG1 p
                        :ARG3 m3)))
      :ARG2 m2)

Caption: the orange lollipop is sad and the red lollipop is surprised
# ::snt the orange lollipop is sad and the red lollipop is surprised
(a / and
      :op1 (s / sad-02
            :ARG1 (l / lollipop
                  :mod (o / orange)))
      :op2 (s2 / surprise-01
            :ARG1 (l2 / lollipop
                  :ARG1-of (r / red-02))))

Caption: the orange lollipop is surprised and the red lollipop is sad
# ::snt the orange lollipop is surprised and the red lollipop is sad
(a / and
      :op1 (s / surprise-01
            :ARG1 (l / lollipop
                  :mod (o / orange)))
      :op2 (s2 / sad-02
            :ARG1 (l2 / lollipop
                  :ARG1-of (r / red-02))))

Caption: the larger person wears yellow and the smaller person does not
# ::snt the larger person wears yellow and the smaller person does not
(a / and
      :op1 (w / wear-01
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / more)))
            :ARG1 (y / yellow))
      :op2 (w2 / wear-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m2 / more)))
            :ARG1 y))

Caption: the smaller person wears yellow and the larger person does not
# ::snt the smaller person wears yellow and the larger person does not
(a / and
      :op1 (w / wear-01
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m / more)))
            :ARG1 (y / yellow))
      :op2 (w2 / wear-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m2 / more)))
            :ARG1 y))

Caption: a big cat is next to a small dog
# ::snt a big cat is next to a small dog
(n / next-to
      :op1 (d / dog
            :mod (s / small))
      :domain (c / cat
            :mod (b / big)))

Caption: a small cat is next to a big dog
# ::snt a small cat is next to a big dog
(n / next-to
      :op1 (d / dog
            :mod (b / big))
      :domain (c / cat
            :mod (s / small)))

Caption: the heavy oncoming traffic is contrasted with the light outgoing traffic
# ::snt the heavy oncoming traffic is contrasted with the light outgoing traffic
(c / contrast-01
      :ARG1 (t / traffic
            :direction (o / oncoming)
            :mod (h / heavy))
      :ARG2 (t2 / traffic
            :direction (o2 / out-06)
            :ARG1-of (l / light-06)))

Caption: the light oncoming traffic is contrasted with the heavy outgoing traffic
# ::snt the light oncoming traffic is contrasted with the heavy outgoing traffic
(c / contrast-01
      :ARG1 (t / traffic
            :ARG1-of (c2 / come-01
                  :direction (o / on))
            :ARG1-of (l / light-06))
      :ARG2 (t2 / traffic
            :ARG1-of (c3 / come-01
                  :direction (o2 / out))
            :mod (h / heavy)))

Caption: a cold drink on a hot day
# ::snt a cold drink on a hot day
(d / drink-01
      :ARG1-of (c / cold-01)
      :time (d2 / day
            :ARG1-of (h / hot-05)))

Caption: a hot drink on a cold day
# ::snt a hot drink on a cold day
(d / drink
      :ARG1-of (h / hot-05)
      :time (d2 / day
            :ARG1-of (c / cold-01)))

Caption: a person is drinking now and eating later
# ::snt a person is drinking now and eating later
(a / and
      :op1 (d / drink-01
            :ARG0 (p / person)
            :time (n / now))
      :op2 (e / eat-01
            :ARG0 p
            :time (a2 / after
                  :op1 n)))

Caption: a person is drinking later and eating now
# ::snt a person is drinking later and eating now
(a / and
      :op1 (d / drink-01
            :ARG0 (p / person)
            :time (a2 / after))
      :op2 (e / eat-01
            :ARG0 p
            :time (n / now)))

Caption: the sailboat sails close but the beach is far away
# ::snt the sailboat sails close but the beach is far away
(c / contrast-01
      :ARG1 (s / sail-01
            :ARG0 (s2 / sailboat)
            :ARG1-of (c2 / close-10))
      :ARG2 (b / beach
            :location (a / away
                  :extent (f / far))))

Caption: the sailboat sails far away but the beach is close
# ::snt the sailboat sails far away but the beach is close
(s / sail-01
      :ARG0 (s2 / sailboat)
      :direction (a / away
            :extent (f / far))
      :concession-of (c / close-10
            :ARG1 (b / beach)))

Caption: the passenger is riding inattentive to the road and the driver is driving attentive to the road
# ::snt the passenger is riding inattentive to the road and the driver is driving attentive to the road
(a / and
      :op1 (r / ride-01
            :ARG0 (p / passenger
                  :ARG0-of (a2 / attend-02
                        :polarity -
                        :ARG1 (r2 / road))))
      :op2 (d / drive-01
            :ARG0 (p2 / person)
            :ARG0 p2
            :ARG0-of (a3 / attend-02
                  :polarity -
                  :ARG1 r2)))

Caption: the passenger is riding attentive to the road and the driver is driving inattentive to the road
# ::snt the passenger is riding attentive to the road and the driver is driving inattentive to the road
(a / and
      :op1 (r / ride-01
            :ARG0 (p / passenger
                  :ARG0-of (a2 / attend-02
                        :ARG1 (r2 / road))))
      :op2 (d / drive-01
            :ARG0 (p2 / person)
            :ARG0 p2
            :ARG0-of (a3 / attend-02
                  :polarity -
                  :ARG1 r2)))

Caption: it wears a hat but the person doesn't
# ::snt it wears a hat but the person doesn't
(c / contrast-01
      :ARG1 (w / wear-01
            :ARG0 (ii / it)
            :ARG1 (h / hat))
      :ARG2 (w2 / wear-01
            :polarity -
            :ARG0 (p / person)
            :ARG1 h))

Caption: the person wears a hat but it doesn't
# ::snt the person wears a hat
(w / wear-01
      :ARG0 (p / person)
      :ARG1 (h / hat))

Caption: the person with green legs is running quite slowly and the red legged one runs faster
# ::snt the person with green legs is running quite slowly and the red legged one runs faster
(a / and
      :op1 (r / run-02
            :ARG0 (p / person
                  :part (l / leg
                        :ARG1-of (g / green-02)))
            :ARG1-of (s / slow-05
                  :degree (q / quite)))
      :op2 (r2 / run-02
            :ARG0 (o / one
                  :part (l2 / leg
                        :ARG1-of (r3 / red-02)))
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / fast-02
                        :ARG1 r2)
                  :ARG3 (m / more))))

Caption: the person with green legs is running faster and the red legged one runs quite slowly
# ::snt the person with green legs is running faster and the red legged one runs quite slowly
(a / and
      :op1 (r / run-02
            :ARG0 (p / person
                  :part (l / leg
                        :ARG1-of (g / green-02)))
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / fast-02
                        :ARG1 r)
                  :ARG3 (m / more)))
      :op2 (r2 / run-02
            :ARG0 (o / one
                  :part (l2 / leg
                        :ARG1-of (r3 / red-02)))
            :ARG1-of (s / slow-05
                  :degree (q / quite))))

Caption: a person is in the water and close to the sand
# ::snt a person is in the water and close to the sand
(c / close-10
      :ARG1 (p / person)
      :ARG2 (s / sand)
      :location (a / and
            :op1 (w / water)
            :op2 s))

Caption: a person is close to the water and in the sand
# ::snt a person is close to the water and in the sand
(c / close-10
      :ARG1 (p / person)
      :ARG2 (a / and
            :op1 (w / water)
            :op2 (s / sand)))

Caption: a frog is above rocks which are under the water
# ::snt a frog is above rocks which are under the water
(b / be-located-at-91
      :ARG1 (f / frog)
      :ARG2 (a / above
            :op1 (r / rock
                  :location (u / under
                        :op1 (w / water)))))

Caption: a frog is under rocks which are above the water
# ::snt a frog is under rocks which are above the water
(b / be-located-at-91
      :ARG1 (f / frog)
      :ARG2 (u / under
            :op1 (r / rock
                  :location (a / above
                        :op1 (w / water)))))

Caption: driving off the road and on the unpaved terrain
# ::snt driving off the road and on the unpaved terrain
(d / drive-01
      :ARG1 (o / off
            :op1 (r / road))
      :destination (t / terrain
            :ARG1-of (p / pave-01
                  :polarity -)))

Caption: driving on the road and off the unpaved terrain
# ::snt driving on the road and off the unpaved terrain
(d / drive-01
      :ARG1 (a / and
            :op1 (r / road)
            :op2 (o / off
                  :op1 (t / terrain
                        :ARG1-of (p / pave-01
                              :polarity -)))))

Caption: someone is in a helicopter with a car
# ::snt someone is in a helicopter with a car
(b / be-located-at-91
      :ARG1 (s / someone)
      :ARG2 (h / helicopter
            :part (c / car)))

Caption: someone is with a helicopter in a car
# ::snt someone is with a helicopter in a car
(a / accompany-01
      :ARG0 (h / helicopter)
      :ARG1 (s / someone)
      :location (c / car))

Caption: the green one can fit inside the blue one and the blue one can fit outside the green one
# ::snt the green one can fit inside the blue one and the blue one can fit outside the green one
(a / and
      :op1 (p / possible-01
            :ARG1 (f / fit-01
                  :ARG1 (o / one
                        :mod (g / green))
                  :ARG2 (ii / inside
                        :op1 (o2 / one
                              :mod (b / blue)))))
      :op2 (p2 / possible-01
            :ARG1 (f2 / fit-01
                  :ARG1 o2
                  :ARG2 (o3 / outside
                        :op1 o))))

Caption: the green one can fit outside the blue one and the blue one can fit inside the green one
# ::snt the green one can fit outside the blue one and the blue one can fit inside the green one
(a / and
      :op1 (p / possible-01
            :ARG1 (f / fit-06
                  :ARG1 (o / one
                        :mod (g / green))
                  :ARG2 (o2 / outside
                        :op1 (o3 / one
                              :mod (b / blue)))))
      :op2 (p2 / possible-01
            :ARG1 (f2 / fit-06
                  :ARG1 o3
                  :ARG2 (ii / inside))))

Caption: jumping away from the photographer and towards the others
# ::snt jumping away from the photographer and towards the others
(j / jump-03
      :direction (o / other)
      :source (a / away
            :op1 (p / person
                  :ARG0-of (p2 / photograph-01))))

Caption: jumping towards the photographer and away from the others
# ::snt jumping towards the photographer and away from the others
(j / jump-03
      :destination (p / person
            :ARG0-of (p2 / photograph-01))
      :direction (a / away
            :op1 (o / other)))

Caption: someone bakes the dough before the dough is eaten
# ::snt someone bakes the dough before the dough is eaten
(b / bake-01
      :ARG0 (s / someone)
      :ARG1 (d / dough)
      :time (b2 / before
            :op1 (e / eat-01
                  :ARG1 d)))

Caption: the dough is eaten before someone bakes the dough
# ::snt the dough is eaten before someone bakes the dough
(e / eat-01
      :ARG1 (d / dough)
      :time (b / before
            :op1 (b2 / bake-01
                  :ARG0 (s / someone)
                  :ARG1 d)))

Caption: it hatched before it was eaten
# ::snt it hatched before it was eaten
(h / hatch-01
      :ARG1 (ii / it)
      :time (b / before
            :op1 (e / eat-01
                  :ARG1 ii)))

Caption: it was eaten before it hatched
# ::snt it was eaten before it hatched
(e / eat-01
      :ARG1 (ii / it)
      :time (b / before
            :op1 (h / hatch-01
                  :ARG1 ii)))

Caption: there are three bananas and two apples
# ::snt there are three bananas and two apples
(a / and
      :op1 (b / banana
            :quant 3)
      :op2 (a2 / apple
            :quant 2))

Caption: there are two bananas and three apples
# ::snt there are two bananas and three apples
(a / and
      :op1 (b / banana
            :quant 2)
      :op2 (a2 / apple
            :quant 3))

Caption: someone has loaded their plate with one of the toast slices and two of the eggs
# ::snt someone has loaded their plate with one of the toast slices and two of the eggs
(l / load-01
      :ARG0 (s / someone)
      :ARG1 (p / plate
            :poss s)
      :ARG2 (a / and
            :op1 (s2 / slice
                  :quant 1
                  :ARG1-of (ii / include-91
                        :ARG2 (s3 / slice
                              :mod (t / toast-01))))
            :op2 (e / egg
                  :quant 2
                  :ARG1-of (ii2 / include-91
                        :ARG2 (e2 / egg)))))

Caption: someone has loaded their plate with two of the toast slices and one of the eggs
# ::snt someone has loaded their plate with two of the toast slices and one of the eggs
(l / load-01
      :ARG0 (s / someone)
      :ARG1 (p / plate
            :poss s)
      :ARG2 (a / and
            :op1 (s2 / slice
                  :quant 2
                  :ARG1-of (ii / include-91
                        :ARG2 (s3 / slice
                              :mod (t / toast-01))))
            :op2 (e / egg
                  :quant 1
                  :ARG1-of (ii2 / include-91
                        :ARG2 (e2 / egg)))))

Caption: there are three people and two windows
# ::snt there are three people and two windows
(a / and
      :op1 (p / person
            :quant 3)
      :op2 (w / window
            :quant 2))

Caption: there are two people and three windows
# ::snt there are two people and three windows
(a / and
      :op1 (p / person
            :quant 2)
      :op2 (w / window
            :quant 3))

Caption: there are 50 stars on the right flag and 5 stars on the left flag
# ::snt there are 50 stars on the right flag and 5 stars on the left flag
(a / and
      :op1 (s / star
            :quant 50
            :location (f / flag
                  :ARG1-of (r / right-04)))
      :op2 (s2 / star
            :quant 5
            :location (f2 / flag
                  :ARG1-of (l / left-20))))

Caption: there are 5 stars on the right flag and 50 stars on the left flag
# ::snt there are 5 stars on the right flag and 50 stars on the left flag
(a / and
      :op1 (s / star
            :quant 5
            :location (f / flag
                  :ARG1-of (r / right-04)))
      :op2 (s2 / star
            :quant 50
            :location (f2 / flag
                  :ARG1-of (l / left-20))))

Caption: no people wear blue shirts and six people wear white shirts
# ::snt no people wear blue shirts and six people wear white shirts
(a / and
      :op1 (w / wear-01
            :polarity -
            :ARG0 (p / person)
            :ARG1 (s / shirt
                  :mod (b / blue)))
      :op2 (w2 / wear-01
            :ARG0 (p2 / person
                  :quant 6)
            :ARG1 (s2 / shirt
                  :ARG1-of (w3 / white-03))))

Caption: six people wear blue shirts and no people wear white shirts
# ::snt six people wear blue shirts and no people wear white shirts
(a / and
      :op1 (w / wear-01
            :ARG0 (p / person
                  :quant 6)
            :ARG1 (s / shirt
                  :mod (b / blue)))
      :op2 (w2 / wear-01
            :polarity -
            :ARG0 (p2 / person)
            :ARG1 (s2 / shirt
                  :ARG1-of (w3 / white-03))))

Caption: the dog's leg is on the person's torso
# ::snt the dog's leg is on the person's torso
(l / lie-07
      :ARG1 (l2 / leg
            :part-of (d / dog))
      :ARG2 (t / torso
            :part-of (p / person)))

Caption: the person's leg is on the dog's torso
# ::snt the person's leg is on the dog's torso
(b / be-located-at-91
      :ARG1 (l / leg
            :part-of (p / person))
      :ARG2 (t / torso
            :part-of (d / dog)))

Caption: the animal's eyes are bigger than the person's
# ::snt the animal's eyes are bigger than the person's
(h / have-degree-91
      :ARG1 (e / eye
            :part-of (a / animal))
      :ARG2 (b / big)
      :ARG3 (m / more)
      :ARG4 (e2 / eye
            :part-of (p / person)))

Caption: the person's eyes are bigger than the animal's
# ::snt the person's eyes are bigger than the animal's
(h / have-degree-91
      :ARG1 (e / eye
            :part-of (p / person))
      :ARG2 (b / big)
      :ARG3 (m / more)
      :ARG4 (e2 / eye
            :part-of (a / animal)))

Caption: the taller person's arm is around the shorter person's shoulder
# ::snt the taller person's arm is around the shorter person's shoulder
(b / be-located-at-91
      :ARG1 (a / arm
            :part-of (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (t / tall)
                        :ARG3 (m / more))))
      :ARG2 (a2 / around
            :op1 (s / shoulder
                  :part-of (p2 / person
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s2 / short-07
                                    :ARG1 p2)
                              :ARG3 (m2 / more))))))

Caption: the shorter person's arm is around the taller person's shoulder
# ::snt the shorter person's arm is around the taller person's shoulder
(b / be-located-at-91
      :ARG1 (a / arm
            :part-of (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s / short-07
                              :ARG1 a)
                        :ARG3 (m / more))))
      :ARG2 (a2 / around
            :op1 (s2 / shoulder
                  :part-of (p2 / person
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (t / tall)
                              :ARG3 (m2 / more))))))

Caption: the person in a brown coat looks back and the person in a black coat looks forward
# ::snt the person in a brown coat looks back and the person in a black coat looks forward
(a / and
      :op1 (l / look-01
            :ARG0 (p / person
                  :ARG0-of (w / wear-01
                        :ARG1 (c / coat
                              :mod (b / brown))))
            :direction (b2 / back))
      :op2 (l2 / look-01
            :ARG0 (p2 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (c2 / coat
                              :ARG1-of (b3 / black-04))))
            :direction (f / forward)))

Caption: the person in a black coat looks back and the person in a brown coat looks forward
# ::snt the person in a black coat looks back and the person in a brown coat looks forward
(a / and
      :op1 (l / look-01
            :ARG0 (p / person
                  :ARG0-of (w / wear-01
                        :ARG1 (c / coat
                              :ARG1-of (b / black-04))))
            :direction (b2 / back))
      :op2 (l2 / look-01
            :ARG0 (p2 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (c2 / coat
                              :mod (b3 / brown))))
            :direction (f / forward)))

Caption: it ran away while they pursued
# ::snt it ran away while they pursued
(r / run-02
      :ARG0 (ii / it)
      :direction (a / away)
      :time (p / pursue-01
            :ARG0 (t / they)))

Caption: they ran away while it pursued
# ::snt they ran away while it pursued
(r / run-02
      :ARG0 (t / they)
      :direction (a / away)
      :time (p / pursue-01
            :ARG0 (ii / it)))

Caption: almost everyone is in a boat and one is swimming
# ::snt almost everyone is in a boat and one is swimming
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (e / everyone
                  :mod (a2 / almost))
            :ARG2 (b2 / boat))
      :op2 (s / swim-01
            :ARG0 (o / one)))

Caption: one is in a boat and almost everyone is swimming
# ::snt one is in a boat and almost everyone is swimming
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (o / one)
            :ARG2 (b2 / boat))
      :op2 (s / swim-01
            :ARG0 (e / everyone
                  :mod (a2 / almost))))

Caption: the person with the lighter shoes is holding an emoji and the person with the darker shoes isn't
# ::snt the person with the lighter shoes is holding an emoji and the person with the darker shoes isn't
(a / and
      :op1 (h / hold-01
            :ARG0 (p / person
                  :ARG0-of (h2 / have-03
                        :ARG1 (s / shoe
                              :ARG1-of (h3 / have-degree-91
                                    :ARG2 (l / light-07
                                          :ARG1 s)
                                    :ARG3 (m / more)))))
            :ARG1 (e / emoji))
      :op2 (h4 / hold-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG0-of (h5 / have-03
                        :ARG1 (s2 / shoe
                              :ARG1-of (h6 / have-degree-91
                                    :ARG2 (d / dark-02
                                          :ARG1 s2)
                                    :ARG3 (m2 / more)))))
            :ARG1 e))

Caption: the person with the darker shoes is holding an emoji and the person with the lighter shoes isn't
# ::snt the person with the darker shoes is holding an emoji and the person with the lighter shoes isn't
(a / and
      :op1 (h / hold-01
            :ARG0 (p / person
                  :ARG0-of (h2 / have-03
                        :ARG1 (s / shoe
                              :ARG1-of (d / dark-02
                                    :ARG2-of (h3 / have-degree-91
                                          :ARG1 s
                                          :ARG3 (m / more))))))
            :ARG1 (e / emoji))
      :op2 (h4 / hold-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG0-of (h5 / have-03
                        :ARG1 (s2 / shoe
                              :ARG1-of (l / light-07
                                    :ARG2-of (h6 / have-degree-91
                                          :ARG1 s2
                                          :ARG3 (m2 / more))))))
            :ARG1 e))

Caption: the person wearing neutral colors poses and the person wearing brighter colors takes a picture
# ::snt the person wearing neutral colors poses and the person wearing brighter colors takes a picture
(a / and
      :op1 (p / pose-01
            :ARG0 (p2 / person
                  :ARG0-of (w / wear-01
                        :ARG1 (c / color
                              :ARG0-of (n / neutral-02)))))
      :op2 (t / take-01
            :ARG0 (p3 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (c2 / color
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (b / bright-03
                                          :ARG1 c2)
                                    :ARG3 (m / more)))))
            :ARG1 (p4 / picture)))

Caption: the person wearing brighter colors poses and the person wearing neutral colors takes a picture
# ::snt the person wearing brighter colors poses and the person wearing neutral colors takes a picture
(a / and
      :op1 (p / pose-01
            :ARG0 (p2 / person
                  :ARG0-of (w / wear-01
                        :ARG1 (c / color
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (b / bright-03
                                          :ARG1 c)
                                    :ARG3 (m / more))))))
      :op2 (t / take-01
            :ARG0 (p3 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (c2 / color
                              :ARG0-of (n / neutral-02))))
            :ARG1 (p4 / picture)))

Caption: it's a fire truck
# ::snt it's a fire truck
(t / truck
      :mod (f / fire)
      :domain (ii / it))

Caption: it's a truck fire
# ::snt it's a truck fire
(f / fire-04
      :ARG1 (t / truck)
      :domain (ii / it))

Caption: watching the present
# ::snt watching the present
(w / watch-01
      :ARG1 (p / present))

Caption: presenting the watch
# ::snt presenting the watch
(p / present-01
      :ARG1 (w / watch))

Caption: walking out on a rock
# ::snt walking out on a rock
(w / walk-01
      :ARG2 (r / rock)
      :direction (o / out))

Caption: rocking out on a walk
# ::snt rocking out on a walk
(r / rock-out-02
      :time (w / walk-01))

Caption: the kid with the magnifying glass looks at them
# ::snt the kid with the magnifying glass looks at them
(l / look-01
      :ARG0 (k / kid
            :ARG0-of (h / have-03
                  :ARG1 (g / glass
                        :ARG0-of (m / magnify-01))))
      :ARG1 (t / they))

Caption: the kid looks at them with the magnifying glass
# ::snt the kid looks at them with the magnifying glass
(l / look-01
      :ARG0 (k / kid)
      :ARG1 (t / they)
      :instrument (g / glass
            :ARG0-of (m / magnify-01)))

Caption: the person with the kids is sitting
# ::snt the person with the kids is sitting
(s / sit-01
      :ARG1 (p / person
            :accompanier (k / kid)))

Caption: the person is sitting with the kids
# ::snt the person is sitting with the kids
(s / sit-01
      :ARG1 (p / person)
      :ARG2 (k / kid))

Caption: the people with shoes are touching each other
# ::snt the people with shoes are touching each other
(t / touch-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s / shoe)))
      :ARG1 p)

Caption: the people are touching each other with shoes
# ::snt the people are touching each other with shoes
(t / touch-01
      :ARG0 (p / person)
      :ARG1 p
      :ARG2 (s / shoe))

Caption: someone with an apple is hurt by a tree
# ::snt someone with an apple is hurt by a tree
(h / hurt-01
      :ARG0 (t / tree)
      :ARG1 (s / someone
            :part (a / apple)))

Caption: someone is hurt by a tree with an apple
# ::snt someone is hurt by a tree with an apple
(h / hurt-01
      :ARG0 (t / tree)
      :ARG1 (s / someone)
      :ARG2 (a / apple))

Caption: the person that is on the table is eating the food
# ::snt the person that is on the table is eating the food
(e / eat-01
      :ARG0 (p / person
            :ARG1-of (t / table-01))
      :ARG1 (f / food))

Caption: the person is eating the food that is on the table
# ::snt the person is eating the food that is on the table
(e / eat-01
      :ARG0 (p / person)
      :ARG1 (f / food
            :ARG1-of (t / table-01)))

Caption: the watering can is larger than the pot
# ::snt the watering can is larger than the pot
(h / have-degree-91
      :ARG1 (c / can
            :purpose (w / water-01))
      :ARG2 (l / large)
      :ARG3 (m / more)
      :ARG4 (p / pot))

Caption: the pot is larger than the watering can
# ::snt the pot is larger than the watering can
(h / have-degree-91
      :ARG1 (p / pot)
      :ARG2 (l / large)
      :ARG3 (m / more)
      :ARG4 (c / can
            :purpose (w / water-01)))

Caption: they hold a suitcase handle with their left hand and they hold a passport with their right hand
# ::snt they hold a suitcase handle with their left hand and they hold a passport with their right hand
(a / and
      :op1 (h / hold-01
            :ARG0 (t / they
                  :part (h2 / hand
                        :ARG1-of (l / left-20)))
            :ARG1 (h3 / handle
                  :part-of (s / suitcase))
            :instrument h2)
      :op2 (h4 / hold-01
            :ARG0 t
            :ARG1 (p / passport)
            :instrument (h5 / hand
                  :ARG1-of (r / right-04))))

Caption: they hold a passport with their left hand and they hold a suitcase handle with their right hand
# ::snt they hold a passport with their left hand and they hold a suitcase handle with their right hand
(a / and
      :op1 (h / hold-01
            :ARG0 (t / they
                  :part (h2 / hand
                        :ARG1-of (l / left-20)))
            :ARG1 (p / passport)
            :instrument h2)
      :op2 (h3 / hold-01
            :ARG0 t
            :ARG1 (h4 / handle
                  :part-of (s / suitcase))
            :instrument (h5 / hand
                  :ARG1-of (r / right-04))))

Caption: the person with the patterned shirt is curly-haired and the other is straight-haired
# ::snt the person with the patterned shirt is curly-haired and the other is straight-haired
(a / and
      :op1 (p / person
            :mod (h / hair
                  :mod (c / curl-01))
            :domain (p2 / person
                  :ARG0-of (w / wear-01
                        :ARG1 (s / shirt
                              :ARG1-of (p3 / pattern-01)))))
      :op2 (p4 / person
            :mod (o / other)
            :mod (h2 / hair
                  :ARG1-of (s2 / straight-04))))

Caption: the person with the patterned shirt is straight-haired and the other is curly-haired
# ::snt the person with the patterned shirt is straight-haired and the other is curly-haired
(a / and
      :op1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s / shirt
                        :ARG1-of (p2 / pattern-01)))
            :part (h / hair
                  :ARG1-of (s2 / straight-04)))
      :op2 (p3 / person
            :mod (o / other)
            :part (h2 / hair
                  :mod (c / curly))))

Caption: a diagram showing movement from right to left
# ::snt a diagram showing movement from right to left
(d / diagram
      :ARG0-of (s / show-01
            :ARG1 (m / move-01
                  :source (r / right-08)
                  :destination (l / left-19))))

Caption: a diagram showing movement from left to right
# ::snt a diagram showing movement from left to right
(d / diagram
      :ARG0-of (s / show-01
            :ARG1 (m / move-01
                  :source (l / left-19)
                  :destination (r / right-04))))

Caption: the flip flops are too big for these feet
# ::snt the flip flops are too big for these feet
(h / have-degree-91
      :ARG1 (f / flip-flop)
      :ARG2 (b / big)
      :ARG3 (t / too)
      :ARG6 (f2 / foot
            :mod (t2 / this)))

Caption: the feet are too big for these flip flops
# ::snt the feet are too big for these flip flops
(h / have-degree-91
      :ARG1 (f / foot)
      :ARG2 (b / big)
      :ARG3 (t / too)
      :ARG6 (f2 / flip-flop
            :mod (t2 / this)))

Caption: the person who is wearing a crown is kissing a frog
# ::snt the person who is wearing a crown is kissing a frog
(k / kiss-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (c / crown)))
      :ARG1 (f / frog))

Caption: the person is kissing a frog who is wearing a crown
# ::snt the person is kissing a frog who is wearing a crown
(k / kiss-01
      :ARG0 (p / person)
      :ARG1 (f / frog
            :ARG0-of (w / wear-01
                  :ARG1 (c / crown))))

Caption: a dog sitting on a couch with a person lying on the floor
# ::snt a dog sitting on a couch with a person lying on the floor
(a / and
      :op1 (s / sit-01
            :ARG1 (d / dog)
            :ARG2 (c / couch))
      :op2 (l / lie-07
            :ARG1 (p / person)
            :ARG2 (f / floor)))

Caption: a person lying on a couch with a dog sitting on the floor
# ::snt a person lying on a couch with a dog sitting on the floor
(p / person
      :ARG1-of (l / lie-07
            :ARG2 (c / couch))
      :accompanier (d / dog
            :ARG1-of (s / sit-01
                  :ARG2 (f / floor))))

Caption: The uncaged bird has an opened cage door
# ::snt The uncaged bird has an opened cage door
(h / have-03
      :ARG0 (b / bird
            :ARG1-of (c / cage-01
                  :polarity -))
      :ARG1 (d / door
            :ARG1-of (o / open-09)
            :part-of (c2 / cage-01)))

Caption: The caged bird has an unopened cage door
# ::snt The caged bird has an unopened cage door
(h / have-03
      :ARG0 (b / bird
            :ARG1-of (c / cage-01))
      :ARG1 (d / door
            :ARG1-of (o / open-01
                  :polarity -)
            :part-of (c2 / cage-01)))

Caption: meat with potatoes
# ::snt meat with potatoes
(m / meat
      :accompanier (p / potato))

Caption: potatoes with meat
# ::snt potatoes with meat
(p / potato
      :ARG1-of (m / meat-02))

Caption: the person in pink was close to not winning
# ::snt the person in pink was close to not winning
(c / close-10
      :ARG1 (p / person
            :ARG1-of (p2 / pink-04))
      :ARG2 (w / win-01
            :polarity -
            :ARG0 p))

Caption: the person in pink was not close to winning
# ::snt the person in pink was not close to winning
(c / close-10
      :polarity -
      :ARG1 (p / person
            :ARG1-of (p2 / pink-04))
      :ARG2 (w / win-01
            :ARG0 p))

Caption: two humans and one wheel
# ::snt two humans and one wheel
(a / and
      :op1 (h / human
            :quant 2)
      :op2 (w / wheel
            :quant 1))

Caption: two wheels and one human
# ::snt two wheels and one human
(a / and
      :op1 (w / wheel
            :quant 2)
      :op2 (h / human
            :quant 1))

Caption: clothing on lines
# ::snt clothing on lines
(c / clothing
      :location (o / online))

Caption: lines on clothing
# ::snt lines on clothing
(l / line
      :location (c / clothing))

Caption: someone talks on the phone angrily while another person sits happily
# ::snt someone talks on the phone angrily while another person sits happily
(c / contrast-01
      :ARG1 (t / talk-01
            :ARG0 (s / someone)
            :medium (p / phone)
            :manner (a / angry))
      :ARG2 (s2 / sit-01
            :ARG1 (p2 / person
                  :mod (a2 / another))
            :manner (h / happy-01)))

Caption: someone talks on the phone happily while another person sits angrily
# ::snt someone talks on the phone happily while another person sits angrily
(c / contrast-01
      :ARG1 (t / talk-01
            :ARG0 (s / someone)
            :medium (p / phone)
            :ARG2-of (h / happy-01))
      :ARG2 (s2 / sit-01
            :ARG1 (p2 / person
                  :mod (a / another))
            :manner (a2 / angry)))

Caption: two boats and one direction down the stream
# ::snt two boats and one direction down the stream
(a / and
      :op1 (b / boat
            :quant 2)
      :op2 (d / direction
            :quant 1)
      :direction (d2 / down
            :op1 (s / stream)))

Caption: one boat and two directions down the stream
# ::snt one boat and two directions down the stream
(a / and
      :op1 (b / boat
            :quant 1)
      :op2 (d / direction
            :quant 2)
      :direction (d2 / down
            :op1 (s / stream)))

Caption: The dog rides without a visible tongue
# ::snt The dog rides without a visible tongue
(r / ride-01
      :ARG0 (d / dog
            :ARG0-of (h / have-03
                  :polarity -
                  :ARG1 (t / tongue
                        :ARG1-of (s / see-01)))))

Caption: The dog rides with a visible tongue out
# ::snt The dog rides with a visible tongue out
(r / ride-01
      :ARG0 (d / dog
            :part (t / tongue
                  :ARG1-of (s / see-01
                        :ARG1-of (o / out-06))))
      :manner t)

Caption: handing a hammer
# ::snt handing a hammer
(h / hand-01
      :ARG1 (h2 / hammer))

Caption: hammering a hand
# ::snt hammering a hand
(h / hammer-01
      :ARG1 (h2 / hand))

Caption: leaves its shedding
# ::snt leaves its shedding
(l / leave-15
      :ARG1 (s / shed-01
            :ARG1 (ii / it)))

Caption: shedding its leaves
# ::snt shedding its leaves
(s / shed-01
      :ARG0 (ii / it)
      :ARG1 (l / leaf
            :part-of ii))

Caption: they are using no bait but still got fish
# ::snt they are using no bait but still got fish
(c / contrast-01
      :ARG1 (u / use-01
            :ARG0 (t / they)
            :ARG1 (b / bait
                  :polarity -))
      :ARG2 (g / get-01
            :ARG0 t
            :ARG1 (f / fish)
            :mod (s / still)))

Caption: they are using bait but still got no fish
# ::snt they are using bait but still got no fish
(c / contrast-01
      :ARG1 (u / use-01
            :ARG0 (t / they)
            :ARG1 (b / bait))
      :ARG2 (g / get-01
            :polarity -
            :ARG0 t
            :ARG1 (f / fish)
            :mod (s / still)))

Caption: someone on the ground is spraying water towards a vehicle
# ::snt someone on the ground is spraying water towards a vehicle
(s / spray-01
      :ARG0 (s2 / someone
            :location (g / ground))
      :ARG1 (w / water)
      :ARG2 (v / vehicle))

Caption: someone is on a vehicle spraying water towards the ground
# ::snt someone is on a vehicle spraying water towards the ground
(s / spray-01
      :ARG0 (s2 / someone
            :location (v / vehicle))
      :ARG1 (w / water)
      :ARG2 (g / ground))

Caption: the dog wears as a hat what someone would normally bite
# ::snt the dog wears as a hat what someone would normally bite
(w / wear-01
      :ARG0 (d / dog)
      :ARG1 (t / thing
            :ARG1-of (b / bite-01
                  :ARG0 (s / someone)
                  :ARG1-of (n / normal-02)))
      :ARG2 (h / hat))

Caption: the dog bites what someone would normally wear as a hat
# ::snt the dog bites what someone would normally wear as a hat
(b / bite-01
      :ARG0 (d / dog)
      :ARG1 (t / thing
            :ARG1-of (w / wear-01
                  :ARG0 (s / someone)
                  :ARG1-of (n / normal-02))
            :prep-as (h / hat)))

Caption: the happy one is on the left and the upset one is on the right
# ::snt the happy one is on the left and the upset one is on the right
(a / and
      :op1 (l / left-19
            :ARG1 (o / one
                  :ARG1-of (h / happy-01)))
      :op2 (r / right-08
            :ARG1 (o2 / one
                  :ARG1-of (u / upset-01))))

Caption: the upset one is on the left and the happy one is on the right
# ::snt the upset one is on the left and the happy one is on the right
(a / and
      :op1 (l / left-19
            :ARG1 (o / one
                  :ARG1-of (u / upset-01)))
      :op2 (r / right-08
            :ARG1 (o2 / one
                  :ARG1-of (h / happy-01))))

Caption: fake mustache and real hair on head
# ::snt fake mustache and real hair on head
(a / and
      :op1 (m / mustache
            :ARG1-of (f / fake-02))
      :op2 (h / hair
            :ARG1-of (r / real-04)
            :location (h2 / head)))

Caption: real mustache and fake hair on head
# ::snt real mustache and fake hair on head
(a / and
      :op1 (m / mustache
            :ARG1-of (r / real-04))
      :op2 (h / hair
            :ARG1-of (f / fake-02)
            :location (h2 / head)))

Caption: real cat with toy baby
# ::snt real cat with toy baby
(c / cat
      :ARG1-of (r / real-04)
      :accompanier (b / baby
            :mod (t / toy)))

Caption: toy cat with real baby
# ::snt toy cat with real baby
(c / cat
      :mod (t / toy)
      :accompanier (b / baby
            :ARG1-of (r / real-04)))

Caption: the lion is loud and the lionness is quiet
# ::snt the lion is loud and the lionness is quiet
(a / and
      :op1 (l / loud
            :domain (l2 / lion))
      :op2 (q / quiet-04
            :ARG1 (l3 / lion)))

Caption: the lion is quiet and the lionness is loud
# ::snt the lion is quiet and the lionness is loud
(a / and
      :op1 (q / quiet-04
            :ARG1 (l / lion))
      :op2 (l2 / loud
            :domain (l3 / lion)))

Caption: there is a pink couch with green pillows
# ::snt there is a pink couch with green pillows
(c / couch
      :ARG1-of (p / pink-04)
      :ARG0-of (h / have-03
            :ARG1 (p2 / pillow
                  :ARG1-of (g / green-02))))

Caption: there is a green couch with pink pillows
# ::snt there is a green couch with pink pillows
(c / couch
      :ARG1-of (g / green-02)
      :ARG0-of (h / have-03
            :ARG1 (p / pillow
                  :ARG1-of (p2 / pink-04))))

Caption: light colored dog with dark colored cat
# ::snt light colored dog with dark colored cat
(a / accompany-01
      :ARG0 (d / dog
            :ARG1-of (c / color-01
                  :ARG1-of (l / light-06)))
      :ARG1 (c2 / cat
            :ARG1-of (c3 / color-01
                  :ARG1-of (d2 / dark-02))))

Caption: dark colored dog with light colored cat
# ::snt dark colored dog with light colored cat
(a / accompany-01
      :ARG0 (d / dog
            :ARG1-of (c / color-01
                  :ARG1-of (d2 / dark-02)))
      :ARG1 (c2 / cat
            :ARG1-of (c3 / color-01
                  :ARG1-of (l / light-06))))

Caption: someone is wearing a black hat and yellow shirt
# ::snt someone is wearing a black hat and yellow shirt
(w / wear-01
      :ARG0 (s / someone)
      :ARG1 (a / and
            :op1 (h / hat
                  :ARG1-of (b / black-04))
            :op2 (s2 / shirt
                  :mod (y / yellow))))

Caption: someone is wearing a yellow hat and black shirt
# ::snt someone is wearing a yellow hat and black shirt
(w / wear-01
      :ARG0 (s / someone)
      :ARG1 (a / and
            :op1 (h / hat
                  :mod (y / yellow))
            :op2 (s2 / shirt
                  :ARG1-of (b / black-04))))

Caption: black socks and orange shoes
# ::snt black socks and orange shoes
(a / and
      :op1 (s / sock
            :ARG1-of (b / black-04))
      :op2 (s2 / shoe
            :mod (o / orange)))

Caption: orange socks and black shoes
# ::snt orange socks and black shoes
(a / and
      :op1 (s / sock
            :mod (o / orange))
      :op2 (s2 / shoe
            :ARG1-of (b / black-04)))

Caption: red building with white shutters
# ::snt red building with white shutters
(b / building
      :ARG1-of (r / red-02)
      :part (s / shutter
            :ARG1-of (w / white-03)))

Caption: white building with red shutters
# ::snt white building with red shutters
(b / building
      :ARG1-of (w / white-03)
      :part (s / shutter
            :ARG1-of (r / red-02)))

Caption: blue pants and green top
# ::snt blue pants and green top
(a / and
      :op1 (p / pants
            :mod (b / blue))
      :op2 (t / top
            :ARG1-of (g / green-02)))

Caption: green pants and blue top
# ::snt green pants and blue top
(a / and
      :op1 (p / pants
            :ARG1-of (g / green-02))
      :op2 (t / top
            :mod (b / blue)))

Caption: there's one blue and many yellow balls
# ::snt there's one blue and many yellow balls
(a / and
      :op1 (b / ball
            :quant 1
            :mod (b2 / blue))
      :op2 (b3 / ball
            :quant (m / many)
            :mod (y / yellow)))

Caption: there's one yellow and many blue balls
# ::snt there's one yellow and many blue balls
(a / and
      :op1 (b / ball
            :quant 1
            :mod (y / yellow))
      :op2 (b2 / ball
            :quant (m / many)
            :mod (b3 / blue)))

Caption: there are more silver coins than gold coins
# ::snt there are more silver coins than gold coins
(h / have-quant-91
      :ARG1 (c / coin
            :mod (s / silver))
      :ARG3 (m / more)
      :ARG4 (c2 / coin
            :mod (g / gold)))

Caption: there are more gold coins than silver coins
# ::snt there are more gold coins than silver coins
(h / have-quant-91
      :ARG1 (c / coin
            :mod (g / gold))
      :ARG3 (m / more)
      :ARG4 (c2 / coin
            :mod (s / silver)))

Caption: the red team kicking the ball directly next to the blue team
# ::snt the red team kicking the ball directly next to the blue team
(k / kick-01
      :ARG0 (t / team
            :ARG1-of (r / red-02))
      :ARG1 (b / ball)
      :location (n / next-to
            :op1 (t2 / team
                  :mod (b2 / blue))
            :ARG1-of (d / direct-02)))

Caption: the blue team kicking the ball directly next to the red team
# ::snt the blue team kicking the ball directly next to the red team
(k / kick-01
      :ARG0 (t / team
            :mod (b / blue))
      :ARG1 (b2 / ball)
      :location (n / next-to
            :op1 (t2 / team
                  :ARG1-of (r / red-02))
            :ARG1-of (d / direct-02)))

Caption: black dog wearing a brown sweater
# ::snt black dog wearing a brown sweater
(d / dog
      :ARG1-of (b / black-05)
      :ARG0-of (w / wear-01
            :ARG1 (s / sweater
                  :mod (b2 / brown))))

Caption: brown dog wearing a black sweater
# ::snt brown dog wearing a black sweater
(d / dog
      :ARG1-of (b / brown-02)
      :ARG0-of (w / wear-01
            :ARG1 (s / sweater
                  :ARG1-of (b2 / black-04))))

Caption: one green apple surrounded by a bunch of red apples
# ::snt one green apple surrounded by a bunch of red apples
(s / surround-01
      :ARG1 (a / apple
            :quant 1
            :ARG1-of (g / green-02))
      :ARG2 (b / bunch
            :consist-of (a2 / apple
                  :ARG1-of (r / red-02))))

Caption: one red apple surrounded by a bunch of green apples
# ::snt one red apple surrounded by a bunch of green apples
(s / surround-01
      :ARG1 (a / apple
            :quant 1
            :ARG1-of (r / red-02))
      :ARG2 (b / bunch
            :consist-of (a2 / apple
                  :ARG1-of (g / green-02))))

Caption: person in white is reading the orange book
# ::snt person in white is reading the orange book
(r / read-01
      :ARG0 (p / person
            :ARG1-of (w / white-02))
      :ARG1 (b / book
            :mod (o / orange)))

Caption: person in orange is reading the white book
# ::snt person in orange is reading the white book
(r / read-01
      :ARG0 (p / person
            :mod (o / orange))
      :ARG1 (b / book
            :ARG1-of (w / white-03)))

Caption: the children are being quiet while the adult is loud
# ::snt the children are being quiet while the adult is loud
(c / contrast-01
      :ARG1 (q / quiet-04
            :ARG1 (c2 / child))
      :ARG2 (l / loud
            :domain (a / adult)))

Caption: the children are being loud while the adult is quiet
# ::snt the children are being loud while the adult is quiet
(c / contrast-01
      :ARG1 (l / loud
            :domain (c2 / child))
      :ARG2 (q / quiet-04
            :ARG1 (a / adult)))

Caption: the circular mirror is on the left and the rectangular mirror is on the right
# ::snt the circular mirror is on the left and the rectangular mirror is on the right
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (m / mirror
                  :mod (c / circular))
            :ARG2 (l / left-20))
      :op2 (b2 / be-located-at-91
            :ARG1 (m2 / mirror
                  :mod (r / rectangular))
            :ARG2 (r2 / right-04)))

Caption: the rectangular mirror is on the left and the circular mirror is on the right
# ::snt the rectangular mirror is on the left and the circular mirror is on the right
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (m / mirror
                  :mod (r / rectangular))
            :ARG2 (l / left-20))
      :op2 (b2 / be-located-at-91
            :ARG1 (m2 / mirror
                  :mod (c / circular))
            :ARG2 (r2 / right-04)))

Caption: circular food on heart-shaped wood
# ::snt circular food on heart-shaped wood
(f / food
      :mod (c / circular)
      :location (w / wood
            :ARG1-of (s / shape-01
                  :ARG2 (h / heart))))

Caption: heart-shaped food on circular wood
# ::snt heart-shaped food on circular wood
(f / food
      :ARG1-of (s / shape-01
            :ARG2 (h / heart))
      :location (w / wood
            :mod (c / circular)))

Caption: the dress on the left is long and the dress on the right is short
# ::snt the dress on the left is long and the dress on the right is short
(a / and
      :op1 (l / long-03
            :ARG1 (d / dress
                  :ARG1-of (l2 / left-19)))
      :op2 (s / short-07
            :ARG1 (d2 / dress
                  :ARG1-of (r / right-04))))

Caption: the dress on the left is short and the dress on the right is long
# ::snt the dress on the left is short and the dress on the right is long
(a / and
      :op1 (s / short-07
            :ARG1 (d / dress
                  :ARG1-of (l / left-19)))
      :op2 (l2 / long-03
            :ARG1 (d2 / dress
                  :ARG1-of (r / right-04))))

Caption: the balloon in the middle has less air and the other balloons have more air
# ::snt the balloon in the middle has less air and the other balloons have more air
(a / and
      :op1 (h / have-03
            :ARG0 (b / balloon
                  :location (m / middle))
            :ARG1 (a2 / air
                  :quant (l / less)))
      :op2 (h2 / have-03
            :ARG0 (b2 / balloon
                  :mod (o / other))
            :ARG1 (a3 / air
                  :quant (m2 / more))))

Caption: the balloon in the middle has more air and the other balloons have less air
# ::snt the balloon in the middle has more air and the other balloons have less air
(a / and
      :op1 (h / have-03
            :ARG0 (b / balloon
                  :location (m / middle))
            :ARG1 (a2 / air
                  :quant (m2 / more)))
      :op2 (h2 / have-03
            :ARG0 (b2 / balloon
                  :mod (o / other))
            :ARG1 (a3 / air
                  :quant (l / less))))

Caption: the pool has no people and the area around it has a lot of people
# ::snt the pool has no people and the area around it has a lot of people
(a / and
      :op1 (h / have-03
            :polarity -
            :ARG0 (p / pool)
            :ARG1 (p2 / person))
      :op2 (h2 / have-03
            :ARG0 (a2 / area
                  :location (a3 / around
                        :op1 p))
            :ARG1 (p3 / person
                  :quant (l / lot))))

Caption: the pool has a lot of people and the area around it has no people
# ::snt the pool has a lot of people and the area around it has no people
(a / and
      :op1 (h / have-03
            :ARG0 (p / pool)
            :ARG1 (p2 / person
                  :quant (l / lot)))
      :op2 (h2 / have-03
            :polarity -
            :ARG0 (a2 / area
                  :location (a3 / around
                        :op1 p))
            :ARG1 (p3 / person)))

Caption: big fish beside a small person
# ::snt big fish beside a small person
(f / fish
      :mod (b / big)
      :location (b2 / beside
            :op1 (p / person
                  :mod (s / small))))

Caption: small fish beside a big person
# ::snt small fish beside a big person
(f / fish
      :mod (s / small)
      :location (b / beside
            :op1 (p / person
                  :mod (b2 / big))))

Caption: the train is moving fast while the person is still
# ::snt the train is moving fast while the person is still
(c / contrast-01
      :ARG1 (m / move-01
            :ARG1 (t / train)
            :ARG1-of (f / fast-02))
      :ARG2 (s / still
            :domain (p / person)))

Caption: the train is still while the person is moving fast
# ::snt the train is still while the person is moving fast
(c / contrast-01
      :ARG1 (b / be-located-at-91
            :ARG1 (t / train)
            :ARG2 (s / still))
      :ARG2 (m / move-01
            :ARG1 (p / person)
            :ARG1-of (f / fast-02)))

Caption: they're enjoying hot water on a cold day
# ::snt they're enjoying hot water on a cold day
(e / enjoy-01
      :ARG0 (t / they)
      :ARG1 (w / water
            :ARG1-of (h / hot-05))
      :time (d / day
            :ARG1-of (c / cold-01)))

Caption: they're enjoying cold water on a hot day
# ::snt they're enjoying cold water on a hot day
(e / enjoy-01
      :ARG0 (t / they)
      :ARG1 (w / water
            :ARG1-of (c / cold-01))
      :time (d / day
            :ARG1-of (h / hot-05)))

Caption: concrete floors with wood walls
# ::snt concrete floors with wood walls
(f / floor
      :consist-of (c / concrete)
      :accompanier (w / wall
            :consist-of (w2 / wood)))

Caption: wood floors with concrete walls
# ::snt wood floors with concrete walls
(f / floor
      :consist-of (w / wood)
      :accompanier (w2 / wall
            :mod (c / concrete)))

Caption: the person on the left has curly hair and the person on the right has straight hair
# ::snt the person on the left has curly hair and the person on the right has straight hair
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :ARG1-of (l / left-19))
            :ARG1 (h2 / hair
                  :mod (c / curl-01)))
      :op2 (h3 / have-03
            :ARG0 (p2 / person
                  :ARG1-of (r / right-08))
            :ARG1 (h4 / hair
                  :ARG1-of (s / straight-04))))

Caption: the person on the left has straight hair and the person on the right has curly hair
# ::snt the person on the left has straight hair and the person on the right has curly hair
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :ARG1-of (l / left-19))
            :ARG1 (h2 / hair
                  :ARG1-of (s / straight-04)))
      :op2 (h3 / have-03
            :ARG0 (p2 / person
                  :ARG1-of (r / right-08))
            :ARG1 (h4 / hair
                  :mod (c / curl-01))))

Caption: there's a metal bottle with a plastic lid
# ::snt there's a metal bottle with a plastic lid
(b / bottle
      :consist-of (m / metal)
      :ARG0-of (h / have-03
            :ARG1 (l / lid
                  :mod (p / plastic))))

Caption: there's a plastic bottle with a metal lid
# ::snt there's a plastic bottle with a metal lid
(b / bottle
      :consist-of (p / plastic)
      :ARG0-of (h / have-03
            :ARG1 (l / lid
                  :mod (m / metal))))

Caption: the fruit is heavy while the junk food is light
# ::snt the fruit is heavy while the junk food is light
(c / contrast-01
      :ARG1 (h / heavy
            :domain (f / fruit))
      :ARG2 (l / light-06
            :ARG1 (f2 / food
                  :mod (j / junk))))

Caption: the fruit is light while the junk food is heavy
# ::snt the fruit is light while the junk food is heavy
(c / contrast-01
      :ARG1 (l / light-06
            :ARG1 (f / fruit))
      :ARG2 (h / heavy
            :domain (f2 / food
                  :mod (j / junk))))

Caption: the car is sitting upside down while the person is standing rightside up
# ::snt the car is sitting upside down while the person is standing rightside up
(c / contrast-01
      :ARG1 (s / sit-01
            :ARG1 (c2 / car)
            :ARG2 (u / upside
                  :op1 (d / down)))
      :ARG2 (s2 / stand-01
            :ARG0 (p / person)
            :ARG2 (u2 / up
                  :op1 (s3 / side
                        :mod (r / right)))))

Caption: the car is sitting rightside up while the person is standing upside down
# ::snt the car is sitting rightside up while the person is standing upside down
(c / contrast-01
      :ARG1 (s / sit-01
            :ARG1 (c2 / car)
            :ARG2 (u / up-03
                  :ARG1 c2
                  :mod (r / right)))
      :ARG2 (s2 / stand-01
            :ARG0 (p / person)
            :ARG2 (u2 / upside
                  :op1 (d / down))))

Caption: the cup on the left is filled first and the cup on the right is filled second
# ::snt the cup on the left is filled first and the cup on the right is filled second
(a / and
      :op1 (f / fill-01
            :ARG1 (c / cup
                  :ARG1-of (l / left-20))
            :ord (o / ordinal-entity
                  :value 1))
      :op2 (f2 / fill-01
            :ARG1 (c2 / cup
                  :ARG1-of (r / right-04))
            :ord (o2 / ordinal-entity
                  :value 2)))

Caption: the cup on the left is filled second and the cup on the right is filled first
# ::snt the cup on the left is filled second and the cup on the right is filled first
(a / and
      :op1 (f / fill-01
            :li 2
            :ARG1 (c / cup
                  :ARG1-of (l / left-20)))
      :op2 (f2 / fill-01
            :li 1
            :ARG1 (c2 / cup
                  :ARG1-of (r / right-04))))

Caption: milk cow
# ::snt milk cow
(c / cow
      :ARG0-of (m / milk-01))

Caption: cow milk
# ::snt cow milk
(m / milk
      :source (c / cow))

Caption: there is a clock wall
# ::snt there is a clock wall
(w / wall
      :mod (c / clock))

Caption: there is a wall clock
# ::snt there is a wall clock
(c / clock
      :mod (w / wall))

Caption: there is a split banana
# ::snt there is a split banana
(b / banana
      :ARG1-of (s / split-01))

Caption: there is a banana split
# ::snt there is a banana split
(s / split-01
      :ARG1 (b / banana))

Caption: there are two people and a bunch of horses
# ::snt there are two people and a bunch of horses
(a / and
      :op1 (p / person
            :quant 2)
      :op2 (h / horse
            :quant (b / bunch)))

Caption: there are a bunch of people and two horses
# ::snt there are a bunch of people and two horses
(a / and
      :op1 (p / person
            :quant (b / bunch))
      :op2 (h / horse
            :quant 2))

Caption: three white and two brown eggs
# ::snt three white and two brown eggs
(a / and
      :op1 (e / egg
            :quant 3
            :ARG1-of (w / white-03))
      :op2 (e2 / egg
            :quant 2
            :mod (b / brown)))

Caption: two white and three brown eggs
# ::snt two white and three brown eggs
(a / and
      :op1 (e / egg
            :quant 2
            :ARG1-of (w / white-03))
      :op2 (e2 / egg
            :quant 3
            :mod (b / brown)))

Caption: the plastic is in the fish
# ::snt the plastic is in the fish
(p / plastic
      :location (f / fish))

Caption: the fish is in the plastic
# ::snt the fish is in the plastic
(f / fish
      :location (p / plastic))

Caption: the dog's paw is on the cat's face
# ::snt the dog's paw is on the cat's face
(b / be-located-at-91
      :ARG1 (p / paw
            :part-of (d / dog))
      :ARG2 (f / face
            :part-of (c / cat)))

Caption: the cat's paw is on the dog's face
# ::snt the cat's paw is on the dog's face
(b / be-located-at-91
      :ARG1 (p / paw
            :part-of (c / cat))
      :ARG2 (f / face
            :part-of (d / dog)))

Caption: the computer's screen is on and the phone's screen is off
# ::snt the computer's screen is on and the phone's screen is off
(a / and
      :op1 (o / on-01
            :ARG1 (s / screen
                  :part-of (c / computer)))
      :op2 (o2 / off-01
            :ARG1 (s2 / screen
                  :part-of (p / phone))))

Caption: the phone's screen is on and the computer's screen is off
# ::snt the phone's screen is on and the computer's screen is off
(a / and
      :op1 (o / on-01
            :ARG1 (s / screen
                  :part-of (p / phone)))
      :op2 (o2 / off-01
            :ARG1 (s2 / screen
                  :part-of (c / computer))))

Caption: the dog is in the driver's seat and the person is in the passenger's seat
# ::snt the dog is in the driver's seat and the person is in the passenger's seat
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (d / dog)
            :ARG2 (s / seat
                  :poss (p / person
                        :ARG0-of (d2 / drive-01))))
      :op2 (b2 / be-located-at-91
            :ARG1 (p2 / person)
            :ARG2 (s2 / seat
                  :poss (p3 / passenger))))

Caption: the dog is in the passenger's seat and the person is in the driver's seat
# ::snt the dog is in the passenger's seat and the person is in the driver's seat
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (d / dog)
            :ARG2 (s / seat
                  :mod (p / passenger)))
      :op2 (b2 / be-located-at-91
            :ARG1 (p2 / person)
            :ARG2 (s2 / seat
                  :mod (d2 / drive-01))))

Caption: there are more trees than people
# ::snt there are more trees than people
(h / have-quant-91
      :ARG1 (t / tree)
      :ARG3 (m / more)
      :ARG4 (p / person))

Caption: there are more people than trees
# ::snt there are more people than trees
(h / have-quant-91
      :ARG1 (p / person)
      :ARG3 (m / more)
      :ARG4 (t / tree))

Caption: there are more computers than people
# ::snt there are more computers than people
(h / have-quant-91
      :ARG1 (c / computer)
      :ARG3 (m / more)
      :ARG4 (c2 / computer
            :poss (p / person)))

Caption: there are more people than computers
# ::snt there are more people than computers
(h / have-quant-91
      :ARG1 (p / person)
      :ARG3 (m / more)
      :ARG4 (c / computer))

Caption: there is more wood than metal
# ::snt there is more wood than metal
(h / have-quant-91
      :ARG1 (w / wood)
      :ARG3 (m / more)
      :ARG4 (m2 / metal))

Caption: there is more metal than wood
# ::snt there is more metal than wood
(h / have-quant-91
      :ARG1 (m / metal)
      :ARG3 (m2 / more)
      :ARG4 (w / wood))

Caption: there are more hats than people
# ::snt there are more hats than people
(h / have-quant-91
      :ARG1 (h2 / hat)
      :ARG3 (m / more)
      :ARG4 (p / person))

Caption: there are more people than hats
# ::snt there are more people than hats
(h / have-quant-91
      :ARG1 (p / person)
      :ARG3 (m / more)
      :ARG4 (h2 / hat))

Caption: there are more people than stools
# ::snt there are more people than stools
(h / have-quant-91
      :ARG1 (p / person)
      :ARG3 (m / more)
      :ARG4 (s / stool))

Caption: there are more stools than people
# ::snt there are more stools than people
(h / have-quant-91
      :ARG1 (s / stool)
      :ARG3 (m / more)
      :ARG4 (p / person))

Caption: there is more red wine than white wine
# ::snt there is more red wine than white wine
(h / have-quant-91
      :ARG1 (w / wine
            :ARG1-of (r / red-02))
      :ARG3 (m / more)
      :ARG4 (w2 / wine
            :ARG1-of (w3 / white-02)))

Caption: there is more white wine than red wine
# ::snt there is more white wine than red wine
(h / have-quant-91
      :ARG1 (w / wine
            :ARG1-of (w2 / white-02))
      :ARG3 (m / more)
      :ARG4 (w3 / wine
            :ARG1-of (r / red-02)))

Caption: there's more milk than coffee
# ::snt there's more milk than coffee
(h / have-quant-91
      :ARG1 (m / milk)
      :ARG3 (m2 / more)
      :ARG4 (c / coffee))

Caption: there's more coffee than milk
# ::snt there's more coffee than milk
(h / have-quant-91
      :ARG1 (c / coffee)
      :ARG3 (m / more)
      :ARG4 (m2 / milk))

Caption: there's more cereal in the bowl than milk
# ::snt there's more cereal in the bowl than milk
(h / have-quant-91
      :ARG1 (c / cereal
            :location (b / bowl))
      :ARG3 (m / more)
      :ARG4 (m2 / milk))

Caption: there's more milk in the bowl than cereal
# ::snt there's more milk in the bowl than cereal
(h / have-quant-91
      :ARG1 (m / milk
            :location (b / bowl))
      :ARG3 (m2 / more)
      :ARG4 (c / cereal))

Caption: boat sail
# ::snt boat sail
(s / sail-01
      :ARG1 (b / boat))

Caption: sail boat
# ::snt sail boat
(b / boat
      :ARG0-of (s / sail-01))

Caption: boat house
# ::snt boat house
(h / house
      :mod (b / boat))

Caption: house boat
# ::snt house boat
(b / boat
      :mod (h / house))

Caption: check a rip
# ::snt check a rip
(c / check-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / rip-00))

Caption: rip a check
# ::snt rip a check
(r / rip-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / check))

Caption: dress the display
# ::snt dress the display
(d / dress-01
      :ARG1 (d2 / display-01))

Caption: display the dress
# ::snt display the dress
(d / display-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (d2 / dress))

Caption: spoon holding honey
# ::snt spoon holding honey
(s / spoon
      :ARG0-of (h / hold-01
            :ARG1 (h2 / honey)))

Caption: honey holding spoon
# ::snt honey holding spoon
(s / spoon
      :ARG0-of (h / hold-01
            :ARG1 (h2 / honey)))

Caption: books holding up a person
# ::snt books holding up a person
(h / hold-up-10
      :ARG0 (b / book)
      :ARG1 (p / person))

Caption: a person holding up books
# ::snt a person holding up books
(p / person
      :ARG0-of (h / hold-up-10
            :ARG1 (b / book)))

Caption: a dog is using a wheelchair next to a person
# ::snt a dog is using a wheelchair next to a person
(u / use-01
      :ARG0 (d / dog)
      :ARG1 (w / wheelchair)
      :location (n / next-to
            :op1 (p / person)))

Caption: a person is using a wheelchair next to a dog
# ::snt a person is using a wheelchair next to a dog
(u / use-01
      :ARG0 (p / person)
      :ARG1 (w / wheelchair)
      :location (n / next-to
            :op1 (d / dog)))

Caption: some plants surrounding a lightbulb
# ::snt some plants surrounding a lightbulb
(s / surround-01
      :ARG1 (p / plant
            :quant (s2 / some))
      :ARG2 (b / bulb
            :mod (l / light)))

Caption: a lightbulb surrounding some plants
# ::snt a lightbulb surrounding some plants
(s / surround-01
      :ARG1 (b / bulb
            :mod (l / light))
      :ARG2 (p / plant
            :quant (s2 / some)))

Caption: a more lightly-colored dog is holding a toy next to a black dog
# ::snt a more lightly-colored dog is holding a toy next to a black dog
(h / hold-01
      :ARG0 (d / dog
            :ARG1-of (c / color-01
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (l / light-07
                              :ARG1 c)
                        :ARG3 (m / more))))
      :ARG1 (t / toy)
      :location (n / next-to
            :op1 (d2 / dog
                  :ARG1-of (b / black-05))))

Caption: a black dog is holding a toy next to a more lightly-colored dog
# ::snt a black dog is holding a toy next to a more lightly-colored dog
(h / hold-01
      :ARG0 (d / dog
            :ARG1-of (b / black-05))
      :ARG1 (t / toy)
      :location (n / next-to
            :op1 (d2 / dog
                  :ARG1-of (c / color-01
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l / light-07
                                    :ARG1 c)
                              :ARG3 (m / more))))))

Caption: the flowers are taller than the people
# ::snt the flowers are taller than the people
(h / have-degree-91
      :ARG1 (f / flower)
      :ARG2 (t / tall)
      :ARG3 (m / more)
      :ARG4 (p / person))

Caption: the people are taller than the flowers
# ::snt the people are taller than the flowers
(h / have-degree-91
      :ARG1 (p / person)
      :ARG2 (t / tall)
      :ARG3 (m / more)
      :ARG4 (f / flower))

Caption: there's a human in a stroller next to a dog
# ::snt there's a human in a stroller next to a dog
(h / human
      :location (s / stroller)
      :location (n / next-to
            :op1 (d / dog)))

Caption: there's a dog in a stroller next to a human
# ::snt there's a dog in a stroller next to a human
(d / dog
      :location (s / stroller)
      :location (n / next-to
            :op1 (h / human)))

Caption: a person is casting a shadow beside a ball
# ::snt a person is casting a shadow beside a ball
(c / cast-01
      :ARG0 (p / person)
      :ARG1 (s / shadow)
      :ARG2 (b / beside
            :op1 (b2 / ball)))

Caption: a ball is casting a shadow beside a person
# ::snt a ball is casting a shadow beside a person
(c / cast-01
      :ARG0 (b / ball)
      :ARG1 (s / shadow)
      :ARG2 (b2 / beside
            :op1 (p / person)))

Caption: its tail is shorter than its body
# ::snt its tail is shorter than its body
(h / have-degree-91
      :ARG1 (t / tail
            :part-of (ii / it
                  :part (b / body)))
      :ARG2 (s / short-07
            :ARG1 t)
      :ARG3 (m / more)
      :ARG4 b)

Caption: its body is shorter than its tail
# ::snt its body is shorter than its tail
(h / have-degree-91
      :ARG1 (b / body
            :part-of (ii / it
                  :part (t / tail)))
      :ARG2 (s / short-07
            :ARG1 b)
      :ARG3 (m / more)
      :ARG4 t)

Caption: the child is throwing the adult the ball
# ::snt the child is throwing the adult the ball
(t / throw-01
      :ARG0 (c / child)
      :ARG1 (b / ball)
      :ARG2 (a / adult))

Caption: the adult is throwing the child the ball
# ::snt the adult is throwing the child the ball
(t / throw-01
      :ARG0 (a / adult)
      :ARG1 (b / ball)
      :ARG2 (c / child))

Caption: a person underneath lights
# ::snt a person underneath lights
(p / person
      :location (u / underneath
            :op1 (l / light)))

Caption: lights underneath a person
# ::snt lights underneath a person
(l / light
      :location (u / underneath
            :op1 (p / person)))

Caption: some green on the ball
# ::snt some green on the ball
(g / green-03
      :quant (s / some)
      :location (b / ball))

Caption: the ball on some green
# ::snt the ball on some green
(b / ball
      :location (g / green
            :mod (s / some)))

Caption: mind in the clouds
# ::snt mind in the clouds
(m / mind
      :location (c / cloud))

Caption: clouds in the mind
# ::snt clouds in the mind
(c / cloud
      :location (m / mind))

Caption: there's a phone on a map
# ::snt there's a phone on a map
(p / phone
      :location (m / map))

Caption: there's a map on a phone
# ::snt there's a map on a phone
(m / map
      :location (p / phone))

Caption: a person on a rock next to a dog
# ::snt a person on a rock next to a dog
(b / be-located-at-91
      :ARG1 (p / person)
      :ARG2 (r / rock)
      :location (n / next-to
            :op1 (d / dog)))

Caption: a dog on a rock next to a person
# ::snt a dog on a rock next to a person
(d / dog
      :location (n / next-to
            :op1 (p / person)
            :location (r / rock)))

Caption: an adult is flexing beside a child
# ::snt an adult is flexing beside a child
(f / flex-01
      :ARG0 (a / adult)
      :location (b / beside
            :op1 (c / child)))

Caption: a child is flexing beside an adult
# ::snt a child is flexing beside an adult
(f / flex-01
      :ARG0 (c / child)
      :location (b / beside
            :op1 (a / adult)))

Caption: the person is looking at the dog
# ::snt the person is looking at the dog
(l / look-01
      :ARG0 (p / person)
      :ARG1 (d / dog))

Caption: the dog is looking at the person
# ::snt the dog is looking at the person
(l / look-01
      :ARG0 (d / dog)
      :ARG1 (p / person))

Caption: a cat is underneath a red blanket
# ::snt a cat is underneath a red blanket
(c / cat
      :location (u / underneath
            :op1 (b / blanket
                  :ARG1-of (r / red-02))))

Caption: a red blanket is underneath a cat
# ::snt a red blanket is underneath a cat
(u / underneath
      :op1 (c / cat)
      :location-of (b / blanket
            :ARG1-of (r / red-02)))

Caption: the person is bigger than the house
# ::snt the person is bigger than the house
(h / have-degree-91
      :ARG1 (p / person)
      :ARG2 (b / big)
      :ARG3 (m / more)
      :ARG4 (h2 / house))

Caption: the house is bigger than the person
# ::snt the house is bigger than the person
(h / have-degree-91
      :ARG1 (h2 / house)
      :ARG2 (b / big)
      :ARG3 (m / more)
      :ARG4 (p / person))

Caption: the person is underneath the car
# ::snt the person is underneath the car
(b / be-located-at-91
      :ARG1 (p / person)
      :ARG2 (u / underneath
            :op1 (c / car)))

Caption: the car is underneath the person
# ::snt the car is underneath the person
(b / be-located-at-91
      :ARG1 (c / car)
      :ARG2 (u / underneath
            :op1 (p / person)))

Caption: the water is filled with plastic
# ::snt the water is filled with plastic
(f / fill-01
      :ARG1 (w / water)
      :ARG2 (p / plastic))

Caption: the plastic is filled with water
# ::snt the plastic is filled with water
(f / fill-01
      :ARG1 (p / plastic)
      :ARG2 (w / water))

Caption: an apple is on a target
# ::snt an apple is on a target
(t / target-01
      :ARG1 (a / apple))

Caption: a target is on an apple
# ::snt a target is on an apple
(b / be-located-at-91
      :ARG1 (t / thing
            :ARG1-of (t2 / target-01))
      :ARG2 (a / apple))

Caption: plant made out of a light bulb
# ::snt plant made out of a light bulb
(p / plant
      :ARG1-of (m / make-01
            :ARG2 (b / bulb
                  :ARG0-of (l / light-04))))

Caption: light bulb made out of a plant
# ::snt light bulb made out of a plant
(b / bulb
      :ARG0-of (l / light-04)
      :ARG1-of (m / make-01
            :ARG2 (p / plant)))

Caption: parent pointing at child
# ::snt parent pointing at child
(p / point-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (p3 / person)
                  :ARG2 (p4 / parent)
                  :ARG3 (c / child)))
      :ARG2 p3)

Caption: child pointing at parent
# ::snt child pointing at parent
(p / point-01
      :ARG0 (c / child)
      :ARG2 (p2 / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 c
                  :ARG2 (p3 / parent))))

Caption: the person reached the base before the ball
# ::snt the person reached the base before the ball
(r / reach-01
      :ARG0 (p / person)
      :ARG1 (b / base)
      :time (b2 / before
            :op1 (b3 / ball)))

Caption: the ball reached the base before the person
# ::snt the ball reached the base before the person
(r / reach-01
      :ARG0 (b / ball)
      :ARG1 (b2 / base)
      :time (b3 / before
            :op1 (p / person)))

Caption: ice being dumped on top of fish
# ::snt ice being dumped on top of fish
(d / dump-01
      :ARG1 (ii / ice)
      :ARG2 (t / top
            :op1 (f / fish)))

Caption: fish being dumped on top of ice
# ::snt fish being dumped on top of ice
(d / dump-01
      :ARG1 (f / fish)
      :ARG2 (t / top
            :op1 (ii / ice)))

Caption: an adult kisses a child
# ::snt an adult kisses a child
(k / kiss-01
      :ARG0 (a / adult)
      :ARG1 (c / child))

Caption: a child kisses an adult
# ::snt a child kisses an adult
(k / kiss-01
      :ARG0 (c / child)
      :ARG1 (a / adult))

Caption: there's a dog in a mask and a person beside it
# ::snt there's a dog in a mask and a person beside it
(a / and
      :op1 (d / dog
            :ARG0-of (m / mask-01))
      :op2 (p / person
            :location (b / beside
                  :op1 d)))

Caption: there's a dog and a person in a mask beside it
# ::snt there's a dog and a person in a mask beside it
(a / and
      :op1 (d / dog)
      :op2 (p / person
            :ARG0-of (m / mask-01))
      :location (b / beside
            :op1 d))

Caption: the baby on the phone is next to an adult
# ::snt the baby on the phone is next to an adult
(b / be-located-at-91
      :ARG1 (b2 / baby
            :medium (p / phone))
      :ARG2 (n / next-to
            :op1 (a / adult)))

Caption: the baby is next to an adult on the phone
# ::snt the baby is next to an adult on the phone
(b / be-located-at-91
      :ARG1 (b2 / baby)
      :ARG2 (n / next-to
            :op1 (a / adult
                  :ARG0-of (p / phone-01))))

Caption: the person on the left has their arms up and the person on the right has their arms down
# ::snt the person on the left has their arms up and the person on the right has their arms down
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :ARG1-of (l / left-19)
                  :part (a2 / arm))
            :ARG1 (u / up-03
                  :ARG1 a2))
      :op2 (h2 / have-03
            :ARG0 (p2 / person
                  :ARG1-of (r / right-08)
                  :part (a3 / arm))
            :ARG1 (d / down-03
                  :ARG1 a3)))

Caption: the person on the right has their arms up and the person on the left has their arms down
# ::snt the person on the right has their arms up and the person on the left has their arms down
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :ARG1-of (r / right-08)
                  :part (a2 / arm))
            :ARG1 (a3 / arm
                  :direction (u / up)))
      :op2 (h2 / have-03
            :ARG0 (p2 / person
                  :ARG1-of (l / left-19)
                  :part (a4 / arm))
            :ARG1 (a5 / arm
                  :direction (d / down))))

Caption: the person on the left is holding the phone and the person on the right is staring at it
# ::snt the person on the left is holding the phone and the person on the right is staring at it
(a / and
      :op1 (h / hold-01
            :ARG0 (p / person
                  :ARG1-of (l / left-19))
            :ARG1 (p2 / phone))
      :op2 (s / stare-01
            :ARG0 (p3 / person
                  :ARG1-of (r / right-08))
            :ARG1 p2))

Caption: the person on the right is holding the phone and the person on the left is staring at it
# ::snt the person on the right is holding the phone and the person on the left is staring at it
(a / and
      :op1 (h / hold-01
            :ARG0 (p / person
                  :ARG1-of (r / right-08))
            :ARG1 (p2 / phone))
      :op2 (s / stare-01
            :ARG0 (p3 / person
                  :ARG1-of (l / left-19))
            :ARG1 p2))

Caption: the orange on the left is moldy while the orange on the right is fresh
# ::snt the orange on the left is moldy while the orange on the right is fresh
(c / contrast-01
      :ARG1 (m / moldy
            :domain (o / orange
                  :ARG1-of (l / left-20)))
      :ARG2 (f / fresh-04
            :ARG1 (o2 / orange
                  :ARG1-of (r / right-04))))

Caption: the orange on the right is moldy while the orange on the left is fresh
# ::snt the orange on the right is moldy while the orange on the left is fresh
(c / contrast-01
      :ARG1 (m / moldy
            :domain (o / orange
                  :ARG1-of (r / right-04)))
      :ARG2 (f / fresh-04
            :ARG1 (o2 / orange
                  :ARG1-of (l / left-20))))

Caption: a pink scoop of ice cream on top and a blue scoop on bottom
# ::snt a pink scoop of ice cream on top and a blue scoop on bottom
(a / and
      :op1 (s / scoop
            :consist-of (ii / ice-cream)
            :ARG1-of (p / pink-04)
            :location (t / top))
      :op2 (s2 / scoop
            :consist-of (b / blue)
            :location (b2 / bottom)))

Caption: a pink scoop of ice cream on bottom and a blue scoop on top
# ::snt a pink scoop of ice cream on bottom and a blue scoop on top
(a / and
      :op1 (s / scoop
            :consist-of (ii / ice-cream)
            :ARG1-of (p / pink-04)
            :location (b / bottom))
      :op2 (s2 / scoop
            :consist-of (b2 / blue)
            :location (t / top)))

Caption: the glasses on the right are fuller than the glasses on the left
# ::snt the glasses on the right are fuller than the glasses on the left
(h / have-degree-91
      :ARG1 (g / glasses
            :ARG1-of (r / right-04))
      :ARG2 (f / full-09
            :ARG1 g)
      :ARG3 (m / more)
      :ARG4 (g2 / glasses
            :ARG1-of (l / left-20)))

Caption: the glasses on the left are fuller than the glasses on the right
# ::snt the glasses on the left are fuller than the glasses on the right
(h / have-degree-91
      :ARG1 (g / glass
            :ARG1-of (l / left-20))
      :ARG2 (f / full-09)
      :ARG3 (m / more)
      :ARG4 (g2 / glass
            :ARG1-of (r / right-04)))

Caption: the person on the left is blowing bubbles and the person on the right is watching
# ::snt the person on the left is blowing bubbles and the person on the right is watching
(a / and
      :op1 (b / blow-01
            :ARG0 (p / person
                  :ARG1-of (l / left-19))
            :ARG1 (b2 / bubble))
      :op2 (w / watch-01
            :ARG0 (p2 / person
                  :ARG1-of (r / right-08))
            :ARG1 b2))

Caption: the person on the right is blowing bubbles and the person on the left is watching
# ::snt the person on the right is blowing bubbles and the person on the left is watching
(a / and
      :op1 (b / blow-01
            :ARG0 (p / person
                  :ARG1-of (r / right-08))
            :ARG1 (b2 / bubble))
      :op2 (w / watch-01
            :ARG0 (p2 / person
                  :ARG1-of (l / left-19))))

Caption: there's more foam on the left than on the right
# ::snt there's more foam on the left than on the right
(f / foam
      :ARG1-of (h / have-quant-91
            :ARG3 (m / more)
            :ARG4 (f2 / foam
                  :ARG1-of (r / right-08)))
      :location (l / left-19))

Caption: there's more foam on the right than on the left
# ::snt there's more foam on the right than on the left
(f / foam
      :ARG1-of (h / have-quant-91
            :ARG3 (m / more)
            :ARG4 (f2 / foam
                  :ARG1-of (l / left-19)))
      :location (r / right-08))

Caption: a fish is jumping from left to right
# ::snt a fish is jumping from left to right
(j / jump-03
      :ARG0 (f / fish)
      :source (l / left-19)
      :destination (r / right-04))

Caption: a fish is jumping from right to left
# ::snt a fish is jumping from right to left
(j / jump-03
      :ARG0 (f / fish)
      :source (r / right-04)
      :destination (l / left-19))

Caption: they worked out then they drank water
# ::snt they worked out then they drank water
(a / and
      :op1 (w / work-out-02
            :ARG0 (t / they))
      :op2 (d / drink-01
            :ARG0 t
            :ARG1 (w2 / water)
            :time (t2 / then)))

Caption: they drank water then they worked out
# ::snt they drank water then they worked out
(a / and
      :op1 (d / drink-01
            :ARG0 (t / they)
            :ARG1 (w / water))
      :op2 (w2 / work-out-02
            :ARG0 t
            :time (t2 / then)))

Caption: the shrimp are peeled then the shrimp are cooked
# ::snt the shrimp are peeled then the shrimp are cooked
(a / and
      :op1 (p / peel-01
            :ARG1 (s / shrimp))
      :op2 (c / cook-01
            :ARG1 s))

Caption: the shrimp are cooked then the shrimp are peeled
# ::snt the shrimp are cooked then the shrimp are peeled
(a / and
      :op1 (c / cook-01
            :ARG1 (s / shrimp))
      :op2 (p / peel-01
            :ARG1 s))

Caption: the coffee is poured before it is ground
# ::snt the coffee is poured before it is ground
(p / pour-01
      :ARG1 (c / coffee)
      :time (b / before
            :op1 (g / ground-01
                  :ARG1 c)))

Caption: it is ground before the coffee is poured
# ::snt it is ground before the coffee is poured
(g / ground-01
      :ARG1 (ii / it)
      :time (b / before
            :op1 (p / pour-01
                  :ARG1 (c / coffee))))

Caption: the potato is washed and then it is cut
# ::snt the potato is washed and then it is cut
(a / and
      :op1 (w / wash-01
            :ARG1 (p / potato))
      :op2 (c / cut-01
            :ARG1 p
            :time (t / then)))

Caption: the potato is cut and then it is washed
# ::snt the potato is cut and then it is washed
(a / and
      :op1 (c / cut-01
            :ARG1 (p / potato))
      :op2 (w / wash-01
            :ARG1 p
            :time (t / then)))

Caption: the banana is peeled then it is sliced
# ::snt the banana is peeled then it is sliced
(a / and
      :op1 (p / peel-01
            :ARG1 (b / banana))
      :op2 (s / slice-01
            :ARG1 b))

Caption: the banana is sliced then it is peeled
# ::snt the banana is sliced then it is peeled
(a / and
      :op1 (s / slice-01
            :ARG1 (b / banana))
      :op2 (p / peel-01
            :ARG1 b))

Caption: the dog is swimming and the person is standing
# ::snt the dog is swimming and the person is standing
(a / and
      :op1 (s / swim-01
            :ARG0 (d / dog))
      :op2 (s2 / stand-01
            :ARG1 (p / person)))

Caption: the dog is standing and the person is swimming
# ::snt the dog is standing and the person is swimming
(a / and
      :op1 (s / stand-01
            :ARG1 (d / dog))
      :op2 (s2 / swim-01
            :ARG0 (p / person)))

Caption: the person is jumping while the cat is sitting
# ::snt the person is jumping while the cat is sitting
(c / contrast-01
      :ARG1 (j / jump-03
            :ARG0 (p / person))
      :ARG2 (s / sit-01
            :ARG1 (c2 / cat)))

Caption: the person is sitting while the cat is jumping
# ::snt the person is sitting while the cat is jumping
(c / contrast-01
      :ARG1 (s / sit-01
            :ARG1 (p / person))
      :ARG2 (j / jump-03
            :ARG0 (c2 / cat)))

Caption: a cat is lying down and a person is stretching
# ::snt a cat is lying down and a person is stretching
(a / and
      :op1 (l / lie-down-09
            :ARG1 (c / cat))
      :op2 (s / stretch-01
            :ARG0 (p / person)))

Caption: a cat is stretching and a person is lying down
# ::snt a cat is stretching and a person is lying down
(a / and
      :op1 (s / stretch-01
            :ARG1 (c / cat))
      :op2 (l / lie-down-09
            :ARG1 (p / person)))

Caption: some people are standing but more are sitting
# ::snt some people are standing but more are sitting
(c / contrast-01
      :ARG1 (s / stand-01
            :ARG1 (p / person
                  :quant (s2 / some)))
      :ARG2 (s3 / sit-01
            :ARG1 (p2 / person
                  :quant (m / more))))

Caption: some people are sitting but more are standing
# ::snt some people are sitting but more are standing
(c / contrast-01
      :ARG1 (s / sit-01
            :ARG1 (p / person
                  :quant (s2 / some)))
      :ARG2 (s3 / stand-01
            :ARG1 (p2 / person
                  :quant (m / more))))

Caption: The kid throws the pancake and the adult sees it
# ::snt The kid throws the pancake and the adult sees it
(a / and
      :op1 (t / throw-01
            :ARG0 (k / kid)
            :ARG1 (p / pancake))
      :op2 (s / see-01
            :ARG0 (a2 / adult)
            :ARG1 p))

Caption: The kids see the pancake and the adult throws it
# ::snt The kids see the pancake and the adult throws it
(a / and
      :op1 (s / see-01
            :ARG0 (k / kid)
            :ARG1 (p / pancake))
      :op2 (t / throw-01
            :ARG0 (a2 / adult)
            :ARG1 p))

Caption: painting gray walls white
# ::snt painting gray walls white
(p / paint-01
      :ARG1 (w / wall
            :ARG1-of (g / gray-02))
      :ARG2 (w2 / white-03
            :ARG1 w))

Caption: painting white walls gray
# ::snt painting white walls gray
(g / gray-02
      :ARG1 (p / paint-01
            :ARG1 (w / wall
                  :ARG1-of (w2 / white-03))))

Caption: a shorter person wearing blue standing next to a taller person
# ::snt a shorter person wearing blue standing next to a taller person
(s / stand-01
      :ARG1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (b / blue))
            :ARG1-of (h / have-degree-91
                  :ARG2 (s2 / short-07
                        :ARG1 p)
                  :ARG3 (m / more)))
      :ARG2 (n / next-to
            :op1 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (t / tall)
                        :ARG3 (m2 / more)))))

Caption: a taller person wearing blue standing next to a shorter person
# ::snt a taller person wearing blue standing next to a shorter person
(s / stand-01
      :ARG1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (b / blue))
            :ARG1-of (h / have-degree-91
                  :ARG2 (t / tall)
                  :ARG3 (m / more)))
      :ARG2 (n / next-to
            :op1 (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s2 / short-07
                              :ARG1 p2)
                        :ARG3 (m2 / more)))))

Caption: a person wearing a bear mask in blue on the left hand side of a person wearing a panda mask with glasses in pink
# ::snt a person wearing a bear mask in blue on the left hand side of a person wearing a panda mask with glasses in pink
(b / be-located-at-91
      :ARG1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (m / mask
                        :mod (b2 / bear)
                        :mod (b3 / blue))))
      :ARG2 (s / side
            :part-of (p2 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (m2 / mask
                              :mod (p3 / panda)
                              :ARG0-of (h / have-03
                                    :ARG1 (g / glasses
                                          :ARG1-of (p4 / pink-04))))))
            :mod (l / left-handed)))

Caption: a person wearing a panda mask with glasses in blue on the left hand side of a person wearing a bear mask in pink
# ::snt a person wearing a panda mask with glasses in blue on the left hand side of a person wearing a bear mask in pink
(b / be-located-at-91
      :ARG1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (m / mask
                        :mod (p2 / panda)
                        :part (g / glasses
                              :mod (b2 / blue)))))
      :ARG2 (s / side
            :part-of (p3 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (m2 / mask
                              :mod (b3 / bear)
                              :ARG1-of (p4 / pink-04))))
            :mod (l / left-handed)))

Caption: a car containing many a box
# ::snt a car containing many a box
(c / car
      :ARG0-of (c2 / contain-01
            :ARG1 (b / box
                  :quant (m / many))))

Caption: a box containing many a car
# ::snt a box containing many a car
(b / box
      :ARG0-of (c / contain-01
            :ARG1 (c2 / car
                  :quant (m / many))))

Caption: left is red and right is blue
# ::snt left is red and right is blue
(a / and
      :op1 (l / left-19
            :ARG2 (r / red-02))
      :op2 (r2 / right-08
            :ARG2 (b / blue)))

Caption: left is blue and right is red
# ::snt left is blue and right is red
(a / and
      :op1 (b / blue
            :domain (l / left-19))
      :op2 (r / red-02
            :ARG1 (r2 / right-08)))

Caption: many a table tennis racket, just one ball
# ::snt many a table tennis racket, just one ball
(a / and
      :op1 (r / racket
            :purpose (t / tennis
                  :mod (t2 / table))
            :quant (m / many))
      :op2 (b / ball
            :quant 1
            :mod (j / just)))

Caption: just one table tennis racket, many a ball
# ::snt just one table tennis racket, many a ball
(a / and
      :op1 (r / racket
            :quant 1
            :mod (t / tennis
                  :mod (t2 / table))
            :mod (j / just))
      :op2 (b / ball
            :quant (m / many)))

Caption: four lions, no tigers
# ::snt four lions, no tigers
(a / and
      :op1 (l / lion
            :quant 4)
      :op2 (t / tiger
            :polarity -))

Caption: no lions, four tigers
# ::snt no lions, four tigers
(a / and
      :op1 (l / lion
            :polarity -)
      :op2 (t / tiger
            :quant 4))

Caption: a small spherical object is heavier than a big spherical object
# ::snt a small spherical object is heavier than a big spherical object
(h / have-degree-91
      :ARG1 (o / object
            :mod (s / small)
            :mod (s2 / spherical))
      :ARG2 (h2 / heavy)
      :ARG3 (m / more)
      :ARG4 (o2 / object
            :mod (b / big)
            :mod (s3 / spherical)))

Caption: a big spherical object is heavier than a small spherical object
# ::snt a big spherical object is heavier than a small spherical object
(h / have-degree-91
      :ARG1 (o / object
            :mod (b / big)
            :mod (s / spherical))
      :ARG2 (h2 / heavy)
      :ARG3 (m / more)
      :ARG4 (o2 / object
            :mod (s2 / small)
            :mod (s3 / spherical)))

Caption: an older person blocking a younger person
# ::snt an older person blocking a younger person
(b / block-01
      :ARG0 (p / person
            :mod (o / old))
      :ARG1 (p2 / person
            :mod (y / young)))

Caption: a younger person blocking an older person
# ::snt a younger person blocking an older person
(b / block-01
      :ARG0 (p / person
            :ARG1-of (h / have-degree-91
                  :ARG2 (y / young)
                  :ARG3 (m / more)))
      :ARG1 (p2 / person
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (o / old)
                  :ARG3 (m2 / more))))

Caption: white land and black water
# ::snt white land and black water
(a / and
      :op1 (l / land
            :ARG1-of (w / white-02))
      :op2 (w2 / water
            :ARG1-of (b / black-04)))

Caption: black land and white water
# ::snt black land and white water
(a / and
      :op1 (l / land
            :ARG1-of (b / black-04))
      :op2 (w / water
            :ARG1-of (w2 / white-02)))

Caption: the cube is smaller than the shape whose lateral faces meet at a vertex
# ::snt the cube is smaller than the shape whose lateral faces meet at a vertex
(h / have-degree-91
      :ARG1 (c / cube)
      :ARG2 (s / small)
      :ARG3 (m / more)
      :ARG4 (s2 / shape
            :part (f / face
                  :mod (l / lateral)
                  :ARG0-of (m2 / meet-03
                        :location (v / vertex)))))

Caption: the shape whose lateral faces meet at a vertex is smaller than the cube
# ::snt the shape whose lateral faces meet at a vertex is smaller than the cube
(h / have-degree-91
      :ARG1 (s / shape
            :part (f / face
                  :mod (l / lateral)
                  :ARG0-of (m / meet-03
                        :location (v / vertex))))
      :ARG2 (s2 / small)
      :ARG3 (m2 / more)
      :ARG4 (c / cube))

Caption: more bicycles than cars
# ::snt more bicycles than cars
(h / have-quant-91
      :ARG1 (b / bicycle)
      :ARG3 (m / more)
      :ARG4 (c / car))

Caption: more cars than bicycles
# ::snt more cars than bicycles
(h / have-quant-91
      :ARG1 (c / car)
      :ARG3 (m / more)
      :ARG4 (b / bicycle))

Caption: there are more apples than pears
# ::snt there are more apples than pears
(h / have-quant-91
      :ARG1 (a / apple)
      :ARG3 (m / more)
      :ARG4 (p / pear))

Caption: there are more pears than apples
# ::snt there are more pears than apples
(h / have-quant-91
      :ARG1 (p / pear)
      :ARG3 (m / more)
      :ARG4 (a / apple))

Caption: there is more love than hate
# ::snt there is more love than hate
(h / have-quant-91
      :ARG1 (l / love-01)
      :ARG3 (m / more)
      :ARG4 (h2 / hate-01))

Caption: there is more hate than love
# ::snt there is more hate than love
(h / have-quant-91
      :ARG1 (h2 / hate-01)
      :ARG3 (m / more)
      :ARG4 (l / love-01))

Caption: more water than oil
# ::snt more water than oil
(h / have-quant-91
      :ARG1 (w / water)
      :ARG3 (m / more)
      :ARG4 (o / oil))

Caption: more oil than water
# ::snt more oil than water
(h / have-quant-91
      :ARG1 (o / oil)
      :ARG3 (m / more)
      :ARG4 (w / water))

Caption: a person cries while another person wearing jewelry above their shoulders consoles
# ::snt a person cries while another person wearing jewelry above their shoulders consoles
(c / contrast-01
      :ARG1 (c2 / cry-02
            :ARG0 (p / person))
      :ARG2 (c3 / console-01
            :ARG0 (p2 / person
                  :mod (a / another)
                  :ARG0-of (w / wear-01
                        :ARG1 (j / jewelry)
                        :location (a2 / above
                              :op1 (s / shoulder)))
                  :part s)))

Caption: a person consoles while another person wearing jewelry above their shoulders cries
# ::snt a person consoles while another person wearing jewelry above their shoulders cries
(c / console-01
      :ARG0 (p / person)
      :time (c2 / cry-02
            :ARG0 (p2 / person
                  :mod (a / another)
                  :ARG0-of (w / wear-01
                        :ARG1 (j / jewelry)
                        :location (a2 / above
                              :op1 (s / shoulder)))
                  :part s)))

Caption: a person with long hair eating a meat-based product while a person with short hair snacks on some fries
# ::snt a person with long hair eating a meat-based product while a person with short hair snacks on some fries
(c / contrast-01
      :ARG1 (e / eat-01
            :ARG0 (p / person
                  :part (h / hair
                        :ARG1-of (l / long-03)))
            :ARG1 (p2 / product
                  :ARG1-of (b / base-02
                        :ARG2 (m / meat))))
      :ARG2 (s / snack-01
            :ARG0 (p3 / person
                  :part (h2 / hair
                        :ARG1-of (s2 / short-07)))
            :ARG1 (f / fry
                  :quant (s3 / some))))

Caption: a person with short hair eating a meat-based product while a person with long hair snacks on some fries
# ::snt a person with short hair eating a meat-based product while a person with long hair snacks on some fries
(c / contrast-01
      :ARG1 (e / eat-01
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :ARG1-of (s / short-07))))
            :ARG1 (p2 / product
                  :ARG1-of (b / base-02
                        :ARG2 (m / meat))))
      :ARG2 (s2 / snack-01
            :ARG0 (p3 / person
                  :ARG0-of (h3 / have-03
                        :ARG1 (h4 / hair
                              :ARG1-of (l / long-03))))
            :ARG1 (f / fry
                  :quant (s3 / some))))

Caption: water below the boat
# ::snt water below the boat
(w / water
      :location (b / below
            :op1 (b2 / boat)))

Caption: boat below the water
# ::snt boat below the water
(b / boat
      :location (b2 / below
            :op1 (w / water)))

Caption: the one in front is faster than the other one
# ::snt the one in front is faster than the other one
(h / have-degree-91
      :ARG1 (o / one
            :location (f / front))
      :ARG2 (f2 / fast-02
            :ARG1 o)
      :ARG3 (m / more)
      :ARG4 (o2 / one
            :mod (o3 / other)))

Caption: the other one is faster than the one in front
# ::snt the other one is faster than the one in front
(h / have-degree-91
      :ARG1 (o / one
            :mod (o2 / other))
      :ARG2 (f / fast-02)
      :ARG3 (m / more)
      :ARG4 (o3 / one
            :location (f2 / front)))

Caption: You can catch more flies with honey than you can with vinegar
# ::snt You can catch more flies with honey than you can with vinegar
(p / possible-01
      :ARG1 (c / catch-03
            :ARG0 (y / you)
            :ARG1 (f / fly
                  :ARG1-of (h / have-quant-91
                        :ARG3 (m / more)
                        :ARG4 (f2 / fly
                              :ARG1-of (c2 / catch-03
                                    :ARG0 y
                                    :ARG2 (v / vinegar)
                                    :ARG1-of (p2 / possible-01)))))
            :instrument (h2 / honey)))

Caption: You can catch more flies with vinegar than you can with honey
# ::snt You can catch more flies with vinegar than you can with honey
(p / possible-01
      :ARG1 (c / catch-03
            :ARG0 (y / you)
            :ARG1 (f / fly
                  :ARG1-of (h / have-quant-91
                        :ARG3 (m / more)
                        :ARG4 (f2 / fly
                              :ARG1-of (c2 / catch-03
                                    :ARG0 y
                                    :ARG2 (h2 / honey)
                                    :ARG1-of (p2 / possible-01)))))
            :instrument (v / vinegar)))

Caption: It starts with "A" and ends with "Z"
# ::snt It starts with "A" and ends with "Z"
(a / and
      :op1 (s / start-01
            :ARG0 (ii / it)
            :ARG2 (s2 / string-entity
                  :value "A"))
      :op2 (e / end-01
            :ARG0 ii
            :ARG2 (s3 / string-entity
                  :value "Z")))

Caption: It starts with "Z" and ends with "A"
# ::snt It starts with "Z" and ends with "A"
(a / and
      :op1 (s / start-01
            :ARG0 (ii / it)
            :ARG2 (s2 / string-entity
                  :value "Z"))
      :op2 (e / end-01
            :ARG0 ii
            :ARG2 (s3 / string-entity
                  :value "A")))

Caption: a shadow within the line
# ::snt a shadow within the line
(s / shadow
      :location (w / within
            :op1 (l / line)))

Caption: a line within the shadow
# ::snt a line within the shadow
(l / line
      :location (s / shadow))

Caption: the brave in the face of fear
# ::snt the brave in the face of fear
(b / brave-02
      :ARG0 (p / person)
      :ARG1 (f / face-01
            :ARG0 p
            :ARG1 (f2 / fear-01)))

Caption: fear in the face of the brave
# ::snt fear in the face of the brave
(f / fear-01
      :location (f2 / face
            :part-of (p / person
                  :ARG0-of (b / brave-02))))

Caption: I need my strength back
# ::snt I need my strength back
(n / need-01
      :ARG0 (ii / i)
      :ARG1 (s / strong-02
            :ARG1 ii)
      :mod (b / back))

Caption: I need my back strength
# ::snt I need my back strength
(n / need-01
      :ARG0 (ii / i
            :part (b / back))
      :ARG1 (s / strong-02
            :ARG1 ii
            :mod b))

Caption: the one in the middle is taller than the ones on the side are
# ::snt the one in the middle is taller than the ones on the side are
(h / have-degree-91
      :ARG1 (o / one
            :location (m / middle))
      :ARG2 (t / tall)
      :ARG3 (m2 / more)
      :ARG4 (o2 / one
            :location (s / side)))

Caption: the ones on the side are taller than the one in the middle is
# ::snt the ones on the side are taller than the one in the middle is
(h / have-degree-91
      :ARG1 (o / one
            :location (s / side))
      :ARG2 (t / tall)
      :ARG3 (m / more)
      :ARG4 (o2 / one
            :location (m2 / middle)))

Caption: fish flying
# ::snt fish flying
(f / fly-01
      :ARG2 (f2 / fish))

Caption: fly fishing
# ::snt fly fishing
(f / fish-01
      :manner (f2 / fly-01))

Caption: the red car is behind the blue car
# ::snt the red car is behind the blue car
(b / be-located-at-91
      :ARG1 (c / car
            :ARG1-of (r / red-02))
      :ARG2 (b2 / behind
            :op1 (c2 / car
                  :mod (b3 / blue))))

Caption: the blue car is behind the red car
# ::snt the blue car is behind the red car
(b / be-located-at-91
      :ARG1 (c / car
            :mod (b2 / blue))
      :ARG2 (b3 / behind
            :op1 (c2 / car
                  :ARG1-of (r / red-02))))

Caption: the driver wearing a shirt is in front of the other person wearing a sleeveless top
# ::snt the driver wearing a shirt is in front of the other person wearing a sleeveless top
(b / be-located-at-91
      :ARG1 (p / person
            :ARG0-of (d / drive-01)
            :ARG0-of (w / wear-01
                  :ARG1 (s / shirt)))
      :ARG2 (ii / in-front-of
            :op1 (p2 / person
                  :mod (o / other)
                  :ARG0-of (w2 / wear-01
                        :ARG1 (t / top
                              :ARG0-of (h / have-03
                                    :polarity -
                                    :ARG1 (s2 / sleeve)))))))

Caption: the driver wearing a sleeveless top is in front of the other person wearing a shirt
# ::snt the driver wearing a sleeveless top is in front of the other person wearing a shirt
(b / be-located-at-91
      :ARG1 (p / person
            :ARG0-of (d / drive-01)
            :ARG0-of (w / wear-01
                  :ARG1 (t / top
                        :mod (s / sleeve
                              :polarity -))))
      :ARG2 (ii / in-front-of
            :op1 (p2 / person
                  :mod (o / other)
                  :ARG0-of (w2 / wear-01
                        :ARG1 (s2 / shirt)))))

Caption: an object that rolls is on some wood
# ::snt an object that rolls is on some wood
(r / roll-01
      :ARG1 (o / object)
      :location (w / wood
            :quant (s / some)))

Caption: some wood is on an object that rolls
# ::snt some wood is on an object that rolls
(w / wood
      :location (o / object
            :ARG1-of (r / roll-01))
      :quant (s / some))

Caption: a cat viewing a human on a screen
# ::snt a cat viewing a human on a screen
(v / view-01
      :ARG0 (c / cat)
      :ARG1 (h / human)
      :location (s / screen))

Caption: a human viewing a cat on a screen
# ::snt a human viewing a cat on a screen
(v / view-01
      :ARG0 (h / human)
      :ARG1 (c / cat)
      :medium (s / screen))

Caption: a normal person wishing they were a superhero
# ::snt a normal person wishing they were a superhero
(w / wish-01
      :ARG0 (p / person
            :ARG1-of (n / normal-02))
      :ARG1 (s / superhero
            :domain p))

Caption: a superhero wishing they were a normal person
# ::snt a superhero wishing they were a normal person
(w / wish-01
      :ARG0 (s / superhero)
      :ARG1 (p / person
            :ARG1-of (n / normal-02)
            :domain s))

Caption: a mike in the right hand while raising the left
# ::snt a mike in the right hand while raising the left
(b / be-located-at-91
      :ARG1 (m / mic)
      :ARG2 (h / hand
            :ARG1-of (r / right-04))
      :time (r2 / raise-01
            :ARG1 (h2 / hand
                  :ARG1-of (l / left-20))))

Caption: a mike in the left hand while raising the right
# ::snt a mike in the left hand while raising the right
(b / be-located-at-91
      :ARG1 (m / mic)
      :ARG2 (h / hand
            :ARG1-of (l / left-20))
      :time (r / raise-01
            :ARG1 (h2 / hand
                  :ARG1-of (r2 / right-04))))

Caption: a person with long hair behind a person with a beard
# ::snt a person with long hair behind a person with a beard
(p / person
      :ARG0-of (h / have-03
            :ARG1 (h2 / hair
                  :ARG1-of (l / long-03)))
      :location (b / behind
            :op1 (p2 / person
                  :ARG0-of (h3 / have-03
                        :ARG1 (b2 / beard)))))

Caption: a person with a beard behind a person with long hair
# ::snt a person with a beard behind a person with long hair
(p / person
      :ARG0-of (h / have-03
            :ARG1 (b / beard))
      :location (b2 / behind
            :op1 (p2 / person
                  :ARG0-of (h2 / have-03
                        :ARG1 (h3 / hair
                              :ARG1-of (l / long-03))))))

Caption: the person with hair to their shoulders has brown eyes and the other person's are blue
# ::snt the person with hair to their shoulders has brown eyes and the other person's are blue
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :part (h2 / hair
                        :location (s / shoulder)))
            :ARG1 (e / eye
                  :mod (b / brown)))
      :op2 (h3 / have-03
            :ARG0 (p2 / person
                  :mod (o / other)
                  :part (e2 / eye
                        :mod (b2 / blue)
                        :ARG1-of h3))))

Caption: the person with hair to their shoulders has blue eyes and the other person's are brown
# ::snt the person with hair to their shoulders has blue eyes and the other person's are brown
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :part (h2 / hair
                        :location (s / shoulder)))
            :ARG1 (e / eye
                  :mod (b / blue)))
      :op2 (h3 / have-03
            :ARG0 (p2 / person
                  :mod (o / other)
                  :part s)
            :ARG1 (e2 / eye
                  :mod (b2 / brown))))

Caption: a human being on a device that intercepts the sun's rays
# ::snt a human being on a device that intercepts the sun's rays
(b / being
      :mod (h / human)
      :location (d / device
            :ARG0-of (ii / intercept-01
                  :ARG1 (r / ray
                        :poss (s / sun)))))

Caption: a device that intercepts the sun's rays on a human being
# ::snt a device that intercepts the sun's rays on a human being
(d / device
      :ARG0-of (ii / intercept-01
            :ARG1 (r / ray
                  :poss (s / sun))
            :ARG2 (b / being
                  :mod (h / human))))

Caption: more humans than phones
# ::snt more humans than phones
(h / have-quant-91
      :ARG1 (h2 / human)
      :ARG3 (m / more)
      :ARG4 (p / phone))

Caption: more phones than humans
# ::snt more phones than humans
(h / have-quant-91
      :ARG1 (p / phone)
      :ARG3 (m / more)
      :ARG4 (h2 / human))

Caption: a person is in the tube
# ::snt a person is in the tube
(b / be-located-at-91
      :ARG1 (p / person)
      :ARG2 (t / tube))

Caption: a tube is in the person
# ::snt a tube is in the person
(b / be-located-at-91
      :ARG1 (t / tube)
      :ARG2 (p / person))

Caption: the person's head is above the rest of their body
# ::snt the person's head is above the rest of their body
(b / be-located-at-91
      :ARG1 (h / head
            :part-of (p / person))
      :ARG2 (a / above
            :op1 (r / rest
                  :part-of (b2 / body
                        :poss p))))

Caption: the rest of their body is above the person's head
# ::snt the rest of their body is above the person's head
(b / be-located-at-91
      :ARG1 (r / rest
            :part-of (b2 / body
                  :poss (t / they)))
      :ARG2 (a / above
            :op1 (h / head
                  :part-of (p / person))))

Caption: person overboard
# ::snt person overboard
(p / person
      :direction (o / overboard))

Caption: person over board
# ::snt person over board
(p / person
      :mod (o / over
            :op1 (b / board)))

Caption: more red buttons than blue
# ::snt more red buttons than blue
(h / have-quant-91
      :ARG1 (b / button
            :ARG1-of (r / red-02))
      :ARG3 (m / more)
      :ARG4 (b2 / button
            :mod (b3 / blue)))

Caption: more blue buttons than red
# ::snt more blue buttons than red
(h / have-quant-91
      :ARG1 (b / button
            :mod (b2 / blue))
      :ARG3 (m / more)
      :ARG4 (b3 / button
            :ARG1-of (r / red-02)))

Caption: the object at the top left is purple and the one at the bottom right of the group is red
# ::snt the object at the top left is purple and the one at the bottom right of the group is red
(a / and
      :op1 (p / purple-02
            :ARG1 (o / object
                  :location (t / top
                        :ARG1-of (l / left-20))))
      :op2 (r / right-04
            :ARG1 (o2 / object
                  :location (b / bottom
                        :part-of (g / group)))))

Caption: the object at the bottom right is purple and the one at the top left of the group is red
# ::snt the object at the bottom right is purple and the one at the top left of the group is red
(a / and
      :op1 (p / purple-02
            :ARG1 (o / object
                  :location (b / bottom
                        :ARG1-of (r / right-04))))
      :op2 (l / left-20
            :ARG1 (o2 / object
                  :location (t / top
                        :part-of (g / group)))))

Caption: flat at the bottom and pointy on top
# ::snt flat at the bottom and pointy on top
(a / and
      :op1 (f / flat-03
            :location (b / bottom))
      :op2 (p / pointy
            :location (t / top)))

Caption: flat on top and pointy at the bottom
# ::snt flat on top and pointy at the bottom
(a / and
      :op1 (f / flat-03
            :location (t / top))
      :op2 (p / pointy
            :location (b / bottom)))

Caption: seat numbers increasing from left to right
# ::snt seat numbers increasing from left to right
(ii / increase-01
      :ARG1 (n / number
            :quant-of (s / seat))
      :ARG3 (l / left-19)
      :ARG4 (r / right-08))

Caption: seat numbers increasing from right to left
# ::snt seat numbers increasing from right to left
(ii / increase-01
      :ARG1 (n / number
            :quant-of (s / seat))
      :ARG3 (r / right-08)
      :ARG4 (l / left-19))

Caption: the number on the right is larger than the number on the left
# ::snt the number on the right is larger than the number on the left
(h / have-degree-91
      :ARG1 (n / number
            :ARG1-of (r / right-04))
      :ARG2 (l / large)
      :ARG3 (m / more)
      :ARG4 (n2 / number
            :ARG1-of (l2 / left-19)))

Caption: the number on the left is larger than the number on the right
# ::snt the number on the left is larger than the number on the right
(h / have-degree-91
      :ARG1 (n / number
            :ARG1-of (l / left-20))
      :ARG2 (l2 / large)
      :ARG3 (m / more)
      :ARG4 (n2 / number
            :ARG1-of (r / right-04)))

Caption: more hair on the person's face than on their head
# ::snt more hair on the person's face than on their head
(h / have-quant-91
      :ARG1 (h2 / hair
            :location (f / face
                  :part-of (p / person
                        :part (h3 / head))))
      :ARG3 (m / more)
      :ARG4 (h4 / hair
            :location h3))

Caption: more hair on the person's head than on their face
# ::snt more hair on the person's head than on their face
(h / have-quant-91
      :ARG1 (h2 / hair
            :location (h3 / head
                  :part-of (p / person
                        :part (f / face))))
      :ARG3 (m / more)
      :ARG4 (h4 / hair
            :location f))

Caption: the knife on the left and the fork on the right
# ::snt the knife on the left and the fork on the right
(a / and
      :op1 (k / knife
            :ARG1-of (l / left-19))
      :op2 (f / fork
            :ARG1-of (r / right-04)))

Caption: the knife on the right and the fork on the left
# ::snt the knife on the right and the fork on the left
(a / and
      :op1 (k / knife
            :ARG1-of (r / right-04))
      :op2 (f / fork
            :ARG1-of (l / left-19)))

Caption: food on their eyes
# ::snt food on their eyes
(f / food
      :location (e / eye
            :part-of (t / they)))

Caption: eyes on their food
# ::snt eyes on their food
(e / eye
      :location (f / food
            :poss (t / they)))

Caption: cars of bits
# ::snt cars of bits
(c / car
      :consist-of (b / bit))

Caption: bits of cars
# ::snt bits of cars
(c / car
      :quant (b / bit))

Caption: a person on top of the world
# ::snt a person on top of the world
(p / person
      :location (t / top
            :poss (w / world)))

Caption: the world on top of a person
# ::snt the world on top of a person
(b / be-located-at-91
      :ARG1 (w / world)
      :ARG2 (t / top
            :poss (p / person)))

Caption: two people; the one on the right has curly hair and the one on the left doesn't
# ::snt two people; the one on the right has curly hair and the one on the left doesn't
(a / and
      :op1 (h / have-03
            :ARG0 (p / person
                  :quant 2)
            :ARG1 (h2 / hair
                  :mod (c / curl-01)))
      :op2 (h3 / have-03
            :polarity -
            :ARG0 (o / one
                  :ARG1-of (r / right-08))
            :ARG1 (h4 / hair
                  :mod (c2 / curl-01))))

Caption: two people; the one on the left has curly hair and the one on the right doesn't
# ::snt two people; the one on the left has curly hair and the one on the right doesn't
(m / multi-sentence
      :snt1 (p / person
            :quant 2)
      :snt2 (a / and
            :op1 (h / have-03
                  :ARG0 (o / one
                        :ARG1-of (l / left-19))
                  :ARG1 (h2 / hair
                        :mod (c / curl-01)))
            :op2 (h3 / have-03
                  :polarity -
                  :ARG0 (o2 / one
                        :ARG1-of (r / right-08))
                  :ARG1 (h4 / hair
                        :mod (c2 / curl-01)))))

Caption: first the cream, then the jam
# ::snt first the cream, then the jam
(a / and
      :op1 (c / cream
            :ord (o / ordinal-entity
                  :value 1))
      :op2 (j / jam
            :time (t / then)))

Caption: first the jam, then the cream
# ::snt first the jam, then the cream
(a / and
      :op1 (j / jam
            :ord (o / ordinal-entity
                  :value 1))
      :op2 (c / cream
            :time (t / then)))

Caption: more kisses than hugs
# ::snt more kisses than hugs
(h / have-quant-91
      :ARG1 (k / kiss-01)
      :ARG3 (m / more)
      :ARG4 (h2 / hug-01))

Caption: more hugs than kisses
# ::snt more hugs than kisses
(h / have-quant-91
      :ARG1 (h2 / hug-01)
      :ARG3 (m / more)
      :ARG4 (k / kiss-01))

Caption: an inflatable flamingo on a person
# ::snt an inflatable flamingo on a person
(f / flamingo
      :ARG1-of (ii / inflate-01
            :ARG1-of (p / possible-01))
      :location (p2 / person))

Caption: a person on an inflatable flamingo
# ::snt a person on an inflatable flamingo
(p / person
      :location (f / flamingo
            :ARG1-of (ii / inflate-01
                  :ARG1-of (p2 / possible-01))))

Caption: a pink bird with a white beak
# ::snt a pink bird with a white beak
(b / bird
      :ARG1-of (p / pink-04)
      :part (b2 / beak
            :ARG1-of (w / white-03)))

Caption: a white bird with a pink beak
# ::snt a white bird with a pink beak
(b / bird
      :ARG1-of (w / white-03)
      :part (b2 / beak
            :ARG1-of (p / pink-04)))

Caption: a large pink inflatable flamingo along with some other lilos on the water including one that is mostly white
# ::snt a large pink inflatable flamingo along with some other lilos on the water including one that is mostly white
(a / and
      :op1 (f / flamingo
            :mod (l / large)
            :ARG1-of (p / pink-04)
            :ARG1-of (ii / inflate-01))
      :op2 (l2 / lilo
            :mod (o / other)
            :quant (s / some)
            :ARG2-of (ii2 / include-91
                  :ARG1 (l3 / lilo
                        :ARG1-of (w / white-02
                              :mod (m / most)))))
      :location (w2 / water))

Caption: a large white inflatable flamingo along with some other lilos on the water including one that is mostly pink
# ::snt a large white inflatable flamingo along with some other lilos on the water including one that is mostly pink
(a / and
      :op1 (f / flamingo
            :mod (l / large)
            :ARG1-of (w / white-03)
            :ARG1-of (ii / inflate-01))
      :op2 (l2 / lilo
            :mod (o / other)
            :quant (s / some)
            :ARG2-of (ii2 / include-91
                  :ARG1 (l3 / lilo
                        :ARG1-of (p / pink-04
                              :mod (m / most)))))
      :location (w2 / water))

Caption: there are more eyes in the image than there are on a typical human
# ::snt there are more eyes in the image than there are on a typical human
(h / have-quant-91
      :ARG1 (e / eye
            :location (ii / image))
      :ARG3 (m / more)
      :ARG4 (e2 / eye
            :location (h2 / human
                  :ARG1-of (t / typical-02))))

Caption: there are more eyes on a typical human than there are in the image
# ::snt there are more eyes on a typical human than there are in the image
(h / have-quant-91
      :ARG1 (e / eye
            :location (h2 / human
                  :ARG1-of (t / typical-02)))
      :ARG3 (m / more)
      :ARG4 (e2 / eye
            :location (ii / image)))

Caption: the confident doctor's stethoscope is around their neck, and their jacket is over their name tag
# ::snt the confident doctor's stethoscope is around their neck, and their jacket is over their name tag
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (s / stethoscope
                  :poss (d / doctor
                        :ARG0-of (c / confident-01)))
            :ARG2 (a2 / around
                  :op1 (n / neck
                        :part-of (t / they))))
      :op2 (b2 / be-located-at-91
            :ARG1 (j / jacket
                  :poss t)
            :ARG2 (o / over
                  :op1 (t2 / tag
                        :mod (n2 / name)
                        :poss t))))

Caption: the confident doctor's stethoscope is around their neck, and their name tag is over their jacket
# ::snt the confident doctor's stethoscope is around their neck, and their name tag is over their jacket
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (s / stethoscope
                  :poss (d / doctor
                        :ARG0-of (c / confident-01)))
            :ARG2 (a2 / around
                  :op1 (n / neck
                        :part-of (t / they)
                        :part-of t)))
      :op2 (b2 / be-located-at-91
            :ARG1 (t2 / tag
                  :ARG2-of (n2 / name-01
                        :ARG1 t))
            :ARG2 (j / jacket
                  :poss t)))

Caption: few wind turbines and many clouds
# ::snt few wind turbines and many clouds
(a / and
      :op1 (t / turbine
            :mod (w / wind)
            :quant (f / few))
      :op2 (c / cloud
            :quant (m / many)))

Caption: few clouds and many wind turbines
# ::snt few clouds and many wind turbines
(a / and
      :op1 (c / cloud
            :quant (f / few))
      :op2 (t / turbine
            :mod (w / wind)
            :quant (m / many)))

Caption: an adult is reading to their young child
# ::snt an adult is reading to their young child
(r / read-01
      :ARG0 (a / adult)
      :ARG2 (p / person
            :mod (y / young)
            :ARG0-of (h / have-rel-role-91
                  :ARG1 a
                  :ARG2 (c / child))))

Caption: their young child is reading to an adult
# ::snt their young child is reading to an adult
(r / read-01
      :ARG0 (p / person
            :mod (y / young)
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (t / they)
                  :ARG2 (c / child)))
      :ARG2 (a / adult))

Caption: the shopping basket is full and the shelves on the person's right are empty
# ::snt the shopping basket is full and the shelves on the person's right are empty
(a / and
      :op1 (f / fill-01
            :ARG1 (b / basket
                  :purpose (s / shop-01)))
      :op2 (e / empty-02
            :ARG1 (s2 / shelf
                  :location (r / right-04
                        :ARG1 (p / person)))))

Caption: the shelves on the person's right are full and the shopping basket is empty
# ::snt the shelves on the person's right are full and the shopping basket is empty
(a / and
      :op1 (f / full-09
            :ARG1 (s / shelf
                  :location (r / right-04
                        :ARG1 (p / person))))
      :op2 (e / empty-02
            :ARG1 (b / basket
                  :purpose (s2 / shop-01))))

Caption: Young person playing baseball with a green bat and blue ball
# ::snt Young person playing baseball with a green bat and blue ball
(p / play-01
      :ARG0 (p2 / person
            :mod (y / young))
      :ARG1 (b / baseball)
      :instrument (a / and
            :op1 (b2 / bat
                  :ARG1-of (g / green-02))
            :op2 (b3 / ball
                  :mod (b4 / blue))))

Caption: Young person playing baseball with a blue bat and green ball
# ::snt Young person playing baseball with a blue bat and green ball
(p / play-01
      :ARG0 (p2 / person
            :mod (y / young))
      :ARG1 (b / baseball)
      :instrument (a / and
            :op1 (b2 / bat
                  :mod (b3 / blue))
            :op2 (b4 / ball
                  :ARG1-of (g / green-02))))

Caption: painting the white wall red
# ::snt painting the white wall red
(p / paint-01
      :ARG1 (w / wall
            :ARG1-of (w2 / white-03))
      :ARG2 (r / red-02))

Caption: painting the red wall white
# ::snt painting the red wall white
(p / paint-01
      :ARG1 (w / wall
            :ARG1-of (r / red-02))
      :ARG2 (w2 / white))

Caption: wearing a red jacket over blue
# ::snt wearing a red jacket over blue
(w / wear-01
      :ARG1 (j / jacket
            :ARG1-of (r / red-02)
            :ARG1-of (ii / instead-of-91
                  :ARG2 (b / blue))))

Caption: wearing a blue jacket over red
# ::snt wearing a blue jacket over red
(w / wear-01
      :ARG1 (j / jacket
            :mod (b / blue)
            :ARG1-of (ii / instead-of-91
                  :ARG2 (j2 / jacket
                        :mod (r / red)))))

Caption: I had cleaned my car
# ::snt I had cleaned my car
(c / clean-01
      :ARG0 (ii / i)
      :ARG1 (c2 / car
            :poss ii))

Caption: I had my car cleaned
# ::snt I had my car cleaned
(c / clean-01
      :ARG1 (c2 / car
            :poss (ii / i)))

Caption: unfortunate poor people
# ::snt unfortunate poor people
(p / person
      :mod (p2 / poor)
      :ARG2-of (f / fortunate-01
            :polarity -))

Caption: poor unfortunate people
# ::snt poor unfortunate people
(p / person
      :mod (p2 / poor)
      :ARG2-of (f / fortunate-01
            :polarity -))

Caption: there are less gloves than masks
# ::snt there are less gloves than masks
(g / glove
      :ARG1-of (h / have-quant-91
            :ARG3 (l / less)
            :ARG4 (m / mask)))

Caption: there are less masks than gloves
# ::snt there are less masks than gloves
(h / have-quant-91
      :ARG1 (m / mask)
      :ARG3 (l / less)
      :ARG4 (g / glove))

Caption: there are more pineapples than boxes
# ::snt there are more pineapples than boxes
(h / have-quant-91
      :ARG1 (p / pineapple)
      :ARG3 (m / more)
      :ARG4 (b / box))

Caption: there are more boxes than pineapples
# ::snt there are more boxes than pineapples
(h / have-quant-91
      :ARG1 (b / box)
      :ARG3 (m / more)
      :ARG4 (p / pineapple))

Caption: the outer bristles are blue and the inner ones are white
# ::snt the outer bristles are blue and the inner ones are white
(a / and
      :op1 (b / blue
            :domain (b2 / bristle
                  :mod (o / outer)))
      :op2 (w / white-03
            :ARG1 (b3 / bristle
                  :mod (ii / inner))))

Caption: the outer bristles are white and the inner ones are blue
# ::snt the outer bristles are white and the inner ones are blue
(a / and
      :op1 (w / white-03
            :ARG1 (b / bristle
                  :mod (o / outer)))
      :op2 (b2 / blue
            :domain (b3 / bristle
                  :mod (ii / inner))))

Caption: the first vowel is E and the last consonant is N
# ::snt the first vowel is E and the last consonant is N
(a / and
      :op1 (v / vowel
            :ord (o / ordinal-entity
                  :value 1)
            :domain (s / string-entity
                  :value "E"))
      :op2 (c / consonant
            :ord (o2 / ordinal-entity
                  :value -1)
            :domain (s2 / string-entity
                  :value "N")))

Caption: the last vowel is E and the first consonant is N
# ::snt the last vowel is E and the first consonant is N
(a / and
      :op1 (v / vowel
            :mod (l / last)
            :domain (s / string-entity
                  :value "E"))
      :op2 (c / consonant
            :ord (o / ordinal-entity
                  :value 1)
            :domain (s2 / string-entity
                  :value "N")))

Caption: the cat on the left of the photo has its right paw ahead of its left
# ::snt the cat on the left of the photo has its right paw ahead of its left
(h / have-03
      :ARG0 (c / cat
            :ARG1-of (l / left-20
                  :ARG2 (p / photo)))
      :ARG1 (p2 / paw
            :ARG1-of (r / right-04)
            :location (a / ahead
                  :op1 (p3 / paw
                        :ARG1-of (l2 / left-20)))))

Caption: the cat on the left of the photo has its left paw ahead of its right
# ::snt the cat on the left of the photo has its left paw ahead of its right
(h / have-03
      :ARG0 (c / cat
            :part (p / paw
                  :ARG1-of (l / left-20))
            :location (l2 / left-20
                  :ARG2 (p2 / photo)))
      :ARG1 (p3 / paw
            :ARG1-of l2)
      :location (a / ahead
            :op1 (p4 / paw
                  :ARG1-of (r / right-04))))

Caption: the text is black on white
# ::snt the text is black on white
(t / text
      :ARG1-of (b / black-04
            :prep-on (w / white)))

Caption: the text is white on black
# ::snt the text is white on black
(t / text
      :ARG1-of (w / white-03
            :prep-on (b / black-04)))

Caption: the dog sits and the cat stands
# ::snt the dog sits and the cat stands
(a / and
      :op1 (s / sit-01
            :ARG1 (d / dog))
      :op2 (s2 / stand-01
            :ARG1 (c / cat)))

Caption: the dog stands and the cat sits
# ::snt the dog stands and the cat sits
(a / and
      :op1 (s / stand-01
            :ARG1 (d / dog))
      :op2 (s2 / sit-01
            :ARG1 (c / cat)))

Caption: the person with facial hair cycles and the other person runs
# ::snt the person with facial hair cycles and the other person runs
(a / and
      :op1 (c / cycle-01
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :location (f / face)))))
      :op2 (r / run-02
            :ARG0 (p2 / person
                  :mod (o / other))))

Caption: the person with facial hair runs and the other person cycles
# ::snt the person with facial hair runs and the other person cycles
(a / and
      :op1 (r / run-02
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :location (f / face)))))
      :op2 (c / cycle-02
            :ARG0 (p2 / person
                  :mod (o / other))))

Caption: using the laptop while the guitar is close by
# ::snt using the laptop while the guitar is close by
(u / use-01
      :ARG1 (l / laptop)
      :time (c / close-10
            :ARG1 (g / guitar)))

Caption: using the guitar while the laptop is close by
# ::snt using the guitar while the laptop is close by
(u / use-01
      :ARG1 (g / guitar)
      :time (c / close-10
            :ARG1 (l / laptop)))

Caption: a person in a blue coat with a brown-ish coffee cup
# ::snt a person in a blue coat with a brown-ish coffee cup
(p / person
      :ARG0-of (w / wear-01
            :ARG1 (c / coat
                  :mod (b / blue)))
      :ARG0-of (h / have-03
            :ARG1 (c2 / cup
                  :mod (c3 / coffee)
                  :mod (b2 / brown-ish))))

Caption: a person in a brown-ish coat with a blue coffee cup
# ::snt a person in a brown-ish coat with a blue coffee cup
(p / person
      :ARG0-of (w / wear-01
            :ARG1 (c / coat
                  :mod (b / brown-ish)))
      :ARG0-of (h / have-03
            :ARG1 (c2 / cup
                  :mod (c3 / coffee)
                  :mod (b2 / blue))))

Caption: space in a star
# ::snt space in a star
(s / space
      :location (s2 / star))

Caption: a star in space
# ::snt a star in space
(s / star
      :location (s2 / space))

Caption: star of death
# ::snt star of death
(s / star
      :mod (d / die-01))

Caption: death of star
# ::snt death of star
(d / die-01
      :ARG1 (s / star))

Caption: the younger person is making noise while the other is silent
# ::snt the younger person is making noise while the other is silent
(c / contrast-01
      :ARG1 (m / make-01
            :ARG0 (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (y / young)
                        :ARG3 (m2 / more)))
            :ARG1 (n / noise))
      :ARG2 (s / silent
            :domain (p2 / person
                  :mod (o / other))))

Caption: the younger person is silent while the other is making noise
# ::snt the younger person is silent while the other is making noise
(c / contrast-01
      :ARG1 (s / silent
            :domain (p / person
                  :ARG1-of (h / have-degree-91
                        :ARG2 (y / young)
                        :ARG3 (m / more))))
      :ARG2 (m2 / make-01
            :ARG0 (p2 / person
                  :mod (o / other))
            :ARG1 (n / noise)))

Caption: the one on the left is happy and the other is sad
# ::snt the one on the left is happy and the other is sad
(a / and
      :op1 (h / happy-01
            :ARG1 (o / one
                  :ARG1-of (l / left-19)))
      :op2 (s / sad-02
            :ARG1 (o2 / other)))

Caption: the one on the left is sad and the other is happy
# ::snt the one on the left is sad and the other is happy
(a / and
      :op1 (s / sad-02
            :ARG1 (o / one
                  :ARG1-of (l / left-19)))
      :op2 (h / happy-01
            :ARG1 (o2 / other)))

Caption: the person on the left is dancing and the person on the very right is sitting on the sofa
# ::snt the person on the left is dancing and the person on the very right is sitting on the sofa
(a / and
      :op1 (d / dance-01
            :ARG0 (p / person
                  :ARG1-of (l / left-19)))
      :op2 (s / sit-01
            :ARG1 (p2 / person
                  :ARG1-of (r / right-04
                        :degree (v / very)))
            :ARG2 (s2 / sofa)))

Caption: the person on the left is sitting on the sofa and the person on the very right is dancing
# ::snt the person on the left is sitting on the sofa and the person on the very right is dancing
(a / and
      :op1 (s / sit-01
            :ARG1 (p / person
                  :ARG1-of (l / left-19))
            :ARG2 (s2 / sofa))
      :op2 (d / dance-01
            :ARG0 (p2 / person
                  :ARG1-of (r / right-04
                        :degree (v / very)))))

Caption: the person on the left is crying sadly while the one on the right is smiling happily
# ::snt the person on the left is crying sadly while the one on the right is smiling happily
(c / contrast-01
      :ARG1 (c2 / cry-02
            :ARG0 (p / person
                  :ARG1-of (l / left-19))
            :ARG0-of (s / sad-02))
      :ARG2 (s2 / smile-01
            :ARG0 (p2 / person
                  :ARG1-of (r / right-08))
            :ARG2-of (h / happy-01)))

Caption: the person on the left is smiling happily while the one on the right is crying sadly
# ::snt the person on the left is smiling happily while the one on the right is crying sadly
(c / contrast-01
      :ARG1 (s / smile-01
            :ARG0 (p / person
                  :ARG1-of (l / left-19))
            :ARG0-of (h / happy-01))
      :ARG2 (c2 / cry-02
            :ARG0 (p2 / person
                  :ARG1-of (r / right-08))
            :ARG0-of (s2 / sad-02)))

Caption: the large person is drinking from the small coffee cup
# ::snt the large person is drinking from the small coffee cup
(d / drink-01
      :ARG0 (p / person
            :mod (l / large))
      :ARG1 (c / cup
            :mod (c2 / coffee)
            :mod (s / small)))

Caption: the small person is drinking from the large coffee cup
# ::snt the small person is drinking from the large coffee cup
(d / drink-01
      :ARG0 (p / person
            :mod (s / small))
      :ARG1 (c / cup
            :mod (c2 / coffee)
            :mod (l / large)))

Caption: hot rubber and cool metal
# ::snt hot rubber and cool metal
(a / and
      :op1 (r / rubber
            :ARG1-of (h / hot-05))
      :op2 (m / metal
            :ARG1-of (c / cool-06)))

Caption: cool rubber and hot metal
# ::snt cool rubber and hot metal
(a / and
      :op1 (r / rubber
            :ARG1-of (c / cool-06))
      :op2 (m / metal
            :ARG1-of (h / hot-05)))

Caption: the triangular shape is beneath the square one
# ::snt the triangular shape is beneath the square one
(b / be-located-at-91
      :ARG1 (s / shape
            :mod (t / triangular))
      :ARG2 (b2 / beneath
            :op1 (s2 / square-03)))

Caption: the square shape is beneath the triangular one
# ::snt the square shape is beneath the triangular one
(b / be-located-at-91
      :ARG1 (s / shape
            :mod (s2 / square))
      :ARG2 (b2 / beneath
            :op1 (s3 / shape
                  :mod (t / triangular))))

Caption: rough outside but smooth inside
# ::snt rough outside but smooth inside
(c / contrast-01
      :ARG1 (r / rough-02
            :ARG1 (o / outside))
      :ARG2 (s / smooth-06
            :ARG1 (ii / inside)))

Caption: smooth outside but rough inside
# ::snt smooth outside but rough inside
(c / contrast-01
      :ARG1 (s / smooth-04
            :ARG1 (o / outside))
      :ARG2 (r / rough-04
            :ARG1 (ii / inside)))

Caption: the green one is fast and the one in white is comparatively slow
# ::snt the green one is fast and the one in white is comparatively slow
(a / and
      :op1 (f / fast-02
            :ARG1 (o / one
                  :ARG1-of (g / green-02)))
      :op2 (s / slow-05
            :ARG1 (o2 / one
                  :ARG1-of (w / white-03))
            :degree (c / compare-01)))

Caption: the green one is slow and the one in white is comparatively fast
# ::snt the green one is slow and the one in white is comparatively fast
(a / and
      :op1 (s / slow-05
            :ARG1 (o / one
                  :ARG1-of (g / green-02)))
      :op2 (f / fast-02
            :ARG1 (o2 / one
                  :ARG1-of (w / white-03))
            :degree (c / compare-01)))

Caption: there are more humans than balls
# ::snt there are more humans than balls
(h / have-quant-91
      :ARG1 (h2 / human)
      :ARG3 (m / more)
      :ARG4 (b / ball))

Caption: there are more balls than humans
# ::snt there are more balls than humans
(h / have-quant-91
      :ARG1 (b / ball)
      :ARG3 (m / more)
      :ARG4 (b2 / ball
            :quant-of (h2 / human)))

Caption: there are more legs than wheels
# ::snt there are more legs than wheels
(h / have-quant-91
      :ARG1 (l / leg)
      :ARG3 (m / more)
      :ARG4 (w / wheel))

Caption: there are more wheels than legs
# ::snt there are more wheels than legs
(h / have-quant-91
      :ARG1 (w / wheel)
      :ARG3 (m / more)
      :ARG4 (l / leg))

Caption: a group of three people with longer hair and two with short hair in a business context
# ::snt a group of three people with longer hair and two with short hair in a business context
(g / group
      :consist-of (a / and
            :op1 (p / person
                  :quant 3
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :ARG1-of (h3 / have-degree-91
                                    :ARG2 (l / long-03
                                          :ARG1 h2)
                                    :ARG3 (m / more)))))
            :op2 (p2 / person
                  :quant 2
                  :ARG0-of (h4 / have-03
                        :ARG1 (h5 / hair
                              :ARG1-of (s / short-07)))))
      :location (c / context
            :mod (b / business)))

Caption: a group of two people with longer hair and three with short hair in a business context
# ::snt a group of two people with longer hair and three with short hair in a business context
(g / group
      :consist-of (a / and
            :op1 (p / person
                  :quant 2
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :ARG1-of (h3 / have-degree-91
                                    :ARG2 (l / long-03)
                                    :ARG3 (m / more)))))
            :op2 (p2 / person
                  :quant 3
                  :ARG0-of (h4 / have-03
                        :ARG1 (h5 / hair
                              :ARG1-of (s / short-07)))))
      :location (c / context
            :mod (b / business)))

Caption: the gesture of the person sitting down is supporting the understanding of the person standing up
# ::snt the gesture of the person sitting down is supporting the understanding of the person standing up
(g / gesture-01
      :ARG0 (p / person
            :ARG1-of (s / sit-down-02))
      :ARG1 (s2 / support-01
            :ARG0 p
            :ARG1 (u / understand-01
                  :ARG0 (p2 / person
                        :ARG0-of (s3 / stand-up-07)))))

Caption: the gesture of the person standing up is supporting the understanding of the person sitting down
# ::snt the gesture of the person standing up is supporting the understanding of the person sitting down
(g / gesture-01
      :ARG0 (p / person
            :ARG1-of (s / stand-up-07))
      :ARG1 (s2 / support-01
            :ARG0 p
            :ARG1 (u / understand-01
                  :ARG0 (p2 / person
                        :ARG1-of (s3 / sit-down-02)))))

Caption: the circle is above the cross
# ::snt the circle is above the cross
(b / be-located-at-91
      :ARG1 (c / circle)
      :ARG2 (a / above
            :op1 (c2 / cross)))

Caption: the cross is above the circle
# ::snt the cross is above the circle
(b / be-located-at-91
      :ARG1 (c / cross)
      :ARG2 (a / above
            :op1 (c2 / circle)))

Caption: aerial view of a green tree in the brown freshly turned soil next to a green field
# ::snt aerial view of a green tree in the brown freshly turned soil next to a green field
(v / view-01
      :ARG1 (t / tree
            :ARG1-of (g / green-02)
            :location (s / soil
                  :ARG1-of (t2 / turn-02
                        :manner (f / fresh-04))
                  :ARG1-of (b / brown-02)
                  :location (n / next-to
                        :op1 (f2 / field
                              :ARG1-of (g2 / green-02)))))
      :manner (a / aerial))

Caption: aerial view of a green tree in a green field next to the brown freshly turned soil
# ::snt aerial view of a green tree in a green field next to the brown freshly turned soil
(v / view-01
      :ARG1 (t / tree
            :ARG1-of (g / green-02)
            :location (f / field
                  :ARG1-of (g2 / green-02))
            :location (n / next-to
                  :op1 (s / soil
                        :ARG1-of (t2 / turn-01
                              :manner (f2 / fresh-04))
                        :ARG1-of (b / brown-02))))
      :manner (a / aerial))

Caption: physical therapist inspecting blue elastic therapeutic kinesio tape over pink
# ::snt physical therapist inspecting blue elastic therapeutic kinesio tape over pink
(ii / inspect-01
      :ARG0 (t / therapist
            :mod (p / physical))
      :ARG1 (t2 / tape
            :mod (t3 / therapy)
            :mod (e / elastic
                  :mod (b / blue))
            :mod (k / kinesio))
      :manner (o / over
            :op1 (p2 / pink-04)))

Caption: physical therapist inspecting pink elastic therapeutic kinesio tape over blue
# ::snt physical therapist inspecting pink elastic therapeutic kinesio tape over blue
(ii / inspect-01
      :ARG0 (t / therapist
            :mod (p / physical))
      :ARG1 (t2 / tape-01
            :ARG2 (t3 / therapy)
            :mod (k / kinesiology)
            :mod (e / elastic)
            :ARG1-of (p2 / pink-04)
            :location (o / over
                  :op1 (b / blue))))

Caption: the skipping rope color is different to the shoelaces but similar to the shoes
# ::snt the skipping rope color is different to the shoelaces but similar to the shoes
(c / contrast-01
      :ARG1 (d / differ-02
            :ARG1 (c2 / color
                  :mod (r / rope
                        :ARG3-of (s / skip-01)))
            :ARG2 (s2 / shoelace))
      :ARG2 (r2 / resemble-01
            :ARG1 c2
            :ARG2 (s3 / shoe)))

Caption: the skipping rope color is similar to the shoelaces but different to the shoes
# ::snt the skipping rope color is similar to the shoelaces but different to the shoes
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (c2 / color
                  :mod (r2 / rope
                        :ARG3-of (s / skip-01)))
            :ARG2 (s2 / shoelace))
      :ARG2 (d / differ-02
            :ARG1 c2
            :ARG2 (s3 / shoe)))

Caption: the blue balloon is being lifted by the weight
# ::snt the blue balloon is being lifted by the weight
(l / lift-01
      :ARG0 (w / weight)
      :ARG1 (b / balloon
            :mod (b2 / blue)))

Caption: the weight is being lifted by the blue balloon
# ::snt the weight is being lifted by the blue balloon
(l / lift-01
      :ARG0 (b / balloon
            :mod (b2 / blue))
      :ARG1 (w / weight))

Caption: the sea is rough but the rocks are smooth
# ::snt the sea is rough but the rocks are smooth
(c / contrast-01
      :ARG1 (r / rough-04
            :ARG1 (s / sea))
      :ARG2 (s2 / smooth-04
            :ARG1 (r2 / rock)))

Caption: the sea is smooth but the rocks are rough
# ::snt the sea is smooth but the rocks are rough
(c / contrast-01
      :ARG1 (s / smooth-04
            :ARG1 (s2 / sea))
      :ARG2 (r / rough-04
            :ARG1 (r2 / rock)))

Caption: the melting white food is cold while the brown is warm
# ::snt the melting white food is cold while the brown is warm
(c / contrast-01
      :ARG1 (c2 / cold-01
            :ARG1 (f / food
                  :ARG1-of (w / white-03)
                  :ARG1-of (m / melt-01)))
      :ARG2 (w2 / warm-07
            :ARG1 (f2 / food
                  :mod (b / brown))))

Caption: the melting white food is warm while the brown is cold
# ::snt the melting white food is warm while the brown is cold
(c / contrast-01
      :ARG1 (w / warm-07
            :ARG1 (f / food
                  :ARG1-of (w2 / white-03)
                  :ARG1-of (m / melt-01)))
      :ARG2 (c2 / cold-01
            :ARG1 (f2 / food
                  :mod (b / brown))))

Caption: the person with a beard is smiling while the person with long hair is not
# ::snt the person with a beard is smiling while the person with long hair is not
(c / contrast-01
      :ARG1 (s / smile-01
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (b / beard))))
      :ARG2 (s2 / smile-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG0-of (h2 / have-03
                        :ARG1 (h3 / hair
                              :ARG1-of (l / long-03))))))

Caption: the person with long hair is smiling while the person with a beard is not
# ::snt the person with long hair is smiling while the person with a beard is not
(c / contrast-01
      :ARG1 (s / smile-01
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :ARG1-of (l / long-03)))))
      :ARG2 (s2 / smile-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG0-of (h3 / have-03
                        :ARG1 (b / beard)))))

Caption: the pet on the right is white and the one on the left is not
# ::snt the pet on the right is white and the one on the left is not
(a / and
      :op1 (w / white-03
            :ARG1 (p / pet
                  :ARG1-of (r / right-08)))
      :op2 (w2 / white-03
            :polarity -
            :ARG1 (p2 / pet
                  :ARG1-of (l / left-19))))

Caption: the pet on the left is white and the one on the right is not
# ::snt the pet on the left is white and the one on the right is not
(a / and
      :op1 (w / white-03
            :ARG1 (p / pet
                  :ARG1-of (l / left-19)))
      :op2 (w2 / white-03
            :polarity -
            :ARG1 (p2 / pet
                  :ARG1-of (r / right-08))))

Caption: the outlet carrying water from the faucet to the shower head is near the hot tap not the cold
# ::snt the outlet carrying water from the faucet to the shower head is near the hot tap not the cold
(c / contrast-01
      :ARG1 (n / near-02
            :ARG1 (o / outlet
                  :ARG0-of (c2 / carry-01
                        :ARG1 (w / water)
                        :ARG3 (f / faucet)
                        :ARG4 (h / head
                              :part-of (s / shower-01))))
            :ARG2 (t / tap
                  :ARG1-of (h2 / hot-05)))
      :ARG2 (n2 / near-02
            :polarity -
            :ARG1 o
            :ARG2 (t2 / tap
                  :ARG1-of (c3 / cold-01))))

Caption: the outlet carrying water from the faucet to the shower head is near the cold tap not the hot
# ::snt the outlet carrying water from the faucet to the shower head is near the cold tap not the hot
(a / and
      :op1 (n / near-02
            :ARG1 (o / outlet
                  :ARG0-of (c / carry-01
                        :ARG1 (w / water)
                        :ARG3 (f / faucet)
                        :ARG4 (h / head
                              :part-of (s / shower-01))))
            :ARG2 (t / tap
                  :ARG1-of (c2 / cold-01)))
      :op2 (n2 / near-02
            :polarity -
            :ARG1 o
            :ARG2 (t2 / tap
                  :ARG1-of (h2 / hot-05))))

Caption: the larger ball is heavier and the smaller one is lighter
# ::snt the larger ball is heavier and the smaller one is lighter
(a / and
      :op1 (h / have-degree-91
            :ARG1 (b / ball
                  :mod (l / large))
            :ARG2 (h2 / heavy)
            :ARG3 (m / more))
      :op2 (h3 / have-degree-91
            :ARG1 (b2 / ball
                  :mod (s / small))
            :ARG2 (l2 / light-07
                  :ARG1 b2)
            :ARG3 (m2 / more)))

Caption: the larger ball is lighter and the smaller one is heavier
# ::snt the larger ball is lighter and the smaller one is heavier
(a / and
      :op1 (h / have-degree-91
            :ARG1 (b / ball
                  :mod (l / large))
            :ARG2 (l2 / light-06
                  :ARG1 b)
            :ARG3 (m / more))
      :op2 (h2 / have-degree-91
            :ARG1 (b2 / ball
                  :mod (s / small))
            :ARG2 (h3 / heavy)
            :ARG3 (m2 / more)))

Caption: The adult with the magnifying glass looks at the kid
# ::snt The adult with the magnifying glass looks at the kid
(l / look-01
      :ARG0 (a / adult
            :ARG0-of (h / have-03
                  :ARG1 (g / glass
                        :ARG0-of (m / magnify-01))))
      :ARG1 (k / kid))

Caption: The adult looks at the kid with the magnifying glass
# ::snt The adult looks at the kid with the magnifying glass
(l / look-01
      :ARG0 (a / adult)
      :ARG1 (k / kid)
      :instrument (g / glass
            :ARG0-of (m / magnify-01)))

Caption: a dog is on a blanket with spots
# ::snt a dog is on a blanket with spots
(b / be-located-at-91
      :ARG1 (d / dog)
      :ARG2 (b2 / blanket
            :ARG0-of (h / have-03
                  :ARG1 (s / spot))))

Caption: a blanket is on a dog with spots
# ::snt a blanket is on a dog with spots
(b / blanket-01
      :ARG1 (d / dog
            :ARG0-of (h / have-03
                  :ARG1 (s / spot))))

Caption: There is a mouse cake for a birthday
# ::snt There is a mouse cake for a birthday
(c / cake
      :consist-of (m / mouse)
      :purpose (b / birthday))

Caption: There is a birthday cake for a mouse
# ::snt There is a birthday cake for a mouse
(c / cake
      :mod (b / birthday)
      :beneficiary (m / mouse))

Caption: The cold-blooded animal isn't happy in warm water
# ::snt The cold-blooded animal isn't happy in warm water
(h / happy-01
      :polarity -
      :ARG0 (w / water
            :ARG1-of (w2 / warm-07))
      :ARG1 (a / animal
            :ARG1-of (b / blood-02
                  :ARG2 (c / cold-01))))

Caption: The warm-blooded animal isn't happy in cold water
# ::snt The warm-blooded animal isn't happy in cold water
(h / happy-01
      :polarity -
      :ARG0 (w / water
            :ARG1-of (c / cold-01))
      :ARG1 (a / animal
            :ARG1-of (b / blood-02
                  :ARG1-of (w2 / warm-07))))

Caption: The white queen is taking the black king
# ::snt The white queen is taking the black king
(t / take-01
      :ARG0 (q / queen
            :ARG1-of (w / white-02))
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (k / king))
            :ARG1-of (b / black-05)))

Caption: The black queen is taking the white king
# ::snt The black queen is taking the white king
(t / take-01
      :ARG0 (q / queen
            :ARG1-of (b / black-05))
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (k / king))
            :ARG1-of (w / white-02)))

Caption: visiting animals at home can be fun
# ::snt visiting animals at home can be fun
(p / possible-01
      :ARG1 (f / fun-01
            :ARG1 (v / visit-01
                  :ARG1 (a / animal)
                  :location (h / home))))

Caption: animals visiting at home can be fun
# ::snt animals visiting at home can be fun
(p / possible-01
      :ARG1 (f / fun-01
            :ARG1 (v / visit-01
                  :ARG0 (a / animal)
                  :ARG1 (h / home))))

Caption: the person is not happy with the cat
# ::snt the person is not happy with the cat
(h / happy-01
      :polarity -
      :ARG0 (c / cat)
      :ARG1 (p / person))

Caption: the cat is not happy with the person
# ::snt the cat is not happy with the person
(h / happy-01
      :polarity -
      :ARG0 (p / person)
      :ARG1 (c / cat))

Caption: the person is too big for the small door
# ::snt the person is too big for the small door
(h / have-degree-91
      :ARG1 (p / person)
      :ARG2 (b / big)
      :ARG3 (t / too)
      :ARG6 (d / door
            :mod (s / small)))

Caption: the door is too small for the big person
# ::snt the door is too small for the big person
(h / have-degree-91
      :ARG1 (d / door)
      :ARG2 (s / small)
      :ARG3 (t / too)
      :ARG6 (p / person
            :mod (b / big)))

Caption: a taller person is covering the eyes of a shorter person
# ::snt a taller person is covering the eyes of a shorter person
(c / cover-01
      :ARG0 (p / person
            :ARG1-of (h / have-degree-91
                  :ARG2 (t / tall)
                  :ARG3 (m / more)))
      :ARG1 (e / eye
            :part-of (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s / short-07
                              :ARG1 p2)
                        :ARG3 (m2 / more)))))

Caption: a shorter person is covering the eyes of a taller person
# ::snt a shorter person is covering the eyes of a taller person
(c / cover-01
      :ARG0 (p / person
            :ARG1-of (h / have-degree-91
                  :ARG2 (s / short-07
                        :ARG1 p)
                  :ARG3 (m / more)))
      :ARG1 (e / eye
            :part-of (p2 / person
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (t / tall)
                        :ARG3 (m2 / more)))))

Caption: the plant is eating the bug
# ::snt the plant is eating the bug
(e / eat-01
      :ARG0 (p / plant)
      :ARG1 (b / bug))

Caption: the bug is eating the plant
# ::snt the bug is eating the plant
(e / eat-01
      :ARG0 (b / bug)
      :ARG1 (p / plant))

Caption: every bug has a leaf
# ::snt every bug has a leaf
(h / have-03
      :ARG0 (b / bug
            :mod (e / every))
      :ARG1 (l / leaf))

Caption: every leaf has a bug
# ::snt every leaf has a bug
(h / have-03
      :ARG0 (l / leaf
            :mod (e / every))
      :ARG1 (b / bug))

Caption: the green leaves will soon be red as the seasons change
# ::snt the green leaves will soon be red as the seasons change
(r / red-02
      :ARG1 (l / leaf
            :ARG1-of (g / green-02))
      :time (s / soon)
      :time (c / change-01
            :ARG1 (s2 / season)))

Caption: the red leaves will soon be green as the seasons change
# ::snt the red leaves will soon be green as the seasons change
(g / green-02
      :ARG1 (l / leaf
            :ARG1-of (r / red-02))
      :time (s / soon)
      :time (c / change-01
            :ARG1 (s2 / season)))

Caption: the white wall will soon be painted blue
# ::snt the white wall will soon be painted blue
(p / paint-01
      :ARG1 (w / wall
            :ARG1-of (w2 / white-03))
      :ARG2 (b / blue)
      :time (s / soon))

Caption: the blue wall will soon be painted white
# ::snt the blue wall will soon be painted white
(p / paint-01
      :ARG1 (w / wall
            :mod (b / blue))
      :ARG2 (w2 / white-03
            :ARG1 w)
      :time (s / soon))

Caption: the moon prevents the sun's rays from falling on the earth
# ::snt the moon prevents the sun's rays from falling on the earth
(p / prevent-01
      :ARG0 (m / moon)
      :ARG1 (f / fall-01
            :ARG1 (r / ray
                  :part-of (s / sun))
            :ARG4 (p2 / planet
                  :name (n / name
                        :op1 "Earth"))))

Caption: the earth prevents the sun's rays from falling on the moon
# ::snt the earth prevents the sun's rays from falling on the moon
(p / prevent-01
      :ARG0 (p2 / planet
            :name (n / name
                  :op1 "Earth"))
      :ARG1 (f / fall-01
            :ARG1 (r / ray
                  :part-of (s / sun))
            :ARG4 (m / moon)))

Caption: all paper airplanes fly on a straight path except for one which takes a curved one
# ::snt all paper airplanes fly on a straight path except for one which takes a curved one
(f / fly-01
      :ARG2 (a / airplane
            :mod (p / paper)
            :mod (a2 / all)
            :ARG2-of (e / except-01
                  :ARG1 (a3 / airplane
                        :ARG0-of (t / take-01
                              :ARG1 (a4 / airplane
                                    :ARG1-of (c / curve-01))))))
      :path (p2 / path
            :ARG1-of (s / straight-04)))

Caption: all paper airplanes fly on a curved path except for one which takes a straight one
# ::snt all paper airplanes fly on a curved path except for one which takes a straight one
(f / fly-01
      :ARG1 (a / airplane
            :mod (p / paper)
            :mod (a2 / all)
            :ARG2-of (e / except-01
                  :ARG1 (a3 / airplane
                        :ARG0-of (t / take-01
                              :ARG1 (p2 / path
                                    :ARG1-of (s / straight-04))))))
      :path_1 (c / curve-01))

Caption: the person is too big for the pants
# ::snt the person is too big for the pants
(h / have-degree-91
      :ARG1 (p / person)
      :ARG2 (b / big)
      :ARG3 (t / too)
      :ARG6 (p2 / pants))

Caption: the pants is too big for the person
# ::snt the pants is too big for the person
(h / have-degree-91
      :ARG1 (p / pants)
      :ARG2 (b / big)
      :ARG3 (t / too)
      :ARG6 (p2 / person))

Caption: a kid jumped then threw a basketball
# ::snt a kid jumped then threw a basketball
(a / and
      :op1 (j / jump-03
            :ARG0 (k / kid))
      :op2 (t / throw-01
            :ARG0 k
            :ARG1 (b / basketball)))

Caption: a kid threw a basketball then jumped
# ::snt a kid threw a basketball then jumped
(a / and
      :op1 (t / throw-01
            :ARG0 (k / kid)
            :ARG1 (b / basketball))
      :op2 (j / jump-03
            :ARG0 k))

Caption: one cheerlearder supporting multiple cheerleaders
# ::snt one cheerlearder supporting multiple cheerleaders
(s / support-01
      :ARG0 (p / person
            :quant 1
            :ARG0-of (c / cheerlead-01))
      :ARG1 (p2 / person
            :ARG0-of (c2 / cheerlead-01)
            :quant (m / multiple)))

Caption: multiple cheerleaders supporting one cheerlearder
# ::snt multiple cheerleaders supporting one cheerlearder
(s / support-01
      :ARG0 (p / person
            :ARG0-of (c / cheerlead-01)
            :quant (m / multiple))
      :ARG1 (p2 / person
            :ARG0-of (c2 / cheerlead-01)
            :quant (o / one)))

Caption: two persons wearing one scarf
# ::snt two persons wearing one scarf
(w / wear-01
      :ARG0 (p / person
            :quant 2)
      :ARG1 (s / scarf
            :quant 1))

Caption: one person wearing two scarfs
# ::snt one person wearing two scarfs
(p / person
      :quant 1
      :ARG0-of (w / wear-01
            :ARG1 (s / scarf
                  :quant 2)))

Caption: human head on pet
# ::snt human head on pet
(h / head
      :part-of (h2 / human)
      :location (p / pet))

Caption: pet head on human
# ::snt pet head on human
(h / head
      :part-of (p / pet)
      :location (h2 / human))

Caption: the cow is over the moon
# ::snt the cow is over the moon
(b / be-located-at-91
      :ARG1 (c / cow)
      :ARG2 (o / over
            :op1 (m / moon)))

Caption: the moon is over the cow
# ::snt the moon is over the cow
(b / be-located-at-91
      :ARG1 (m / moon)
      :ARG2 (o / over
            :op1 (c / cow)))

Caption: someone babys a pet
# ::snt someone babys a pet
(b / babysit-01
      :ARG0 (s / someone)
      :ARG1 (p / pet))

Caption: someone pets a baby
# ::snt someone pets a baby
(p / pet-01
      :ARG0 (s / someone)
      :ARG1 (b / baby))

Caption: cat house
# ::snt cat house
(h / house
      :mod (c / cat))

Caption: house cat
# ::snt house cat
(c / cat
      :mod (h / house))

Caption: gold for pan
# ::snt gold for pan
(g / gold
      :prep-for (p / pan))

Caption: pan for gold
# ::snt pan for gold
(p / pan
      :purpose (g / gold))

Caption: water for plants
# ::snt water for plants
(w / water
      :purpose (p / plant))

Caption: plants for water
# ::snt plants for water
(p / plant
      :purpose (w / water))

Caption: the businessperson's down fall
# ::snt the businessperson's down fall
(f / fall-01
      :ARG1 (p / person
            :mod (b / business))
      :ARG4 (d / down))

Caption: the businessperson's fall down
# ::snt the businessperson's fall down
(f / fall-01
      :ARG1 (p / person
            :mod (b / business))
      :direction (d / down))

Caption: outswam the person in the red swimcap
# ::snt outswam the person in the red swimcap
(o / outswam-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s / swimcap
                        :ARG1-of (r / red-02)))))

Caption: the person in the red swimcap swamout
# ::snt the person in the red swimcap swamout
(s / swim-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s2 / swimcap
                        :ARG1-of (r / red-02))))
      :direction (o / out))

Caption: manning a ship
# ::snt manning a ship
(m / man-01
      :ARG1 (s / ship))

Caption: shiping a mann
# ::snt shiping a mann
(s / ship-01
      :ARG1 (m / mann))

Caption: the person wearing a sweater stands in front of the person who isn't wearing a sweater
# ::snt the person wearing a sweater stands in front of the person who isn't wearing a sweater
(s / stand-01
      :ARG1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s2 / sweater)))
      :ARG2 (ii / in-front-of
            :op1 (p2 / person
                  :ARG0-of (w2 / wear-01
                        :polarity -
                        :ARG1 (s3 / sweater)))))

Caption: the person who isn't wearing a sweater stands in front of the person wearing a sweater
# ::snt the person who isn't wearing a sweater stands in front of the person wearing a sweater
(s / stand-01
      :ARG1 (p / person
            :ARG0-of (w / wear-01
                  :polarity -
                  :ARG1 (s2 / sweater)))
      :ARG2 (ii / in-front-of
            :op1 (p2 / person
                  :ARG0-of (w2 / wear-01
                        :ARG1 (s3 / sweater)))))

Caption: a person without glasses pushes a person with glasses sitting in a box
# ::snt a person without glasses pushes a person with glasses sitting in a box
(p / push-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-03
                  :polarity -
                  :ARG1 (g / glasses)))
      :ARG1 (p3 / person
            :ARG0-of (h2 / have-03
                  :ARG1 g)
            :ARG1-of (s / sit-01
                  :ARG2 (b / box))))

Caption: a person with glasses pushes a person without glasses sitting in a box
# ::snt a person with glasses pushes a person without glasses sitting in a box
(p / push-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-03
                  :ARG1 (g / glasses)))
      :ARG1 (p3 / person
            :ARG0-of (h2 / have-03
                  :polarity -
                  :ARG1 (g2 / glasses))
            :ARG1-of (s / sit-01
                  :ARG2 (b / box))))

Caption: what is green will soon be yellow
# ::snt what is green will soon be yellow
(y / yellow
      :domain (t / thing
            :ARG1-of (g / green-02))
      :time (s / soon))

Caption: what is yellow will soon be green
# ::snt what is yellow will soon be green
(g / green-02
      :ARG1 (t / thing
            :ARG1-of (y / yellow-02))
      :time (s / soon))

Caption: soon this animal not with a tail will have one
# ::snt soon this animal not with a tail will have one
(h / have-03
      :ARG0 (a / animal
            :mod (t / this)
            :ARG0-of h
            :polarity -
            :ARG1 (t2 / tail))
      :ARG1 t2
      :time (s / soon))

Caption: soon this animal with a tail will not have one
# ::snt soon this animal with a tail will not have one
(h / have-03
      :polarity -
      :ARG0 (a / animal
            :mod (t / this)
            :ARG0-of h
            :ARG1 (t2 / tail))
      :ARG1 t2
      :time (s / soon))

Caption: a mouse is touching a dog
# ::snt a mouse is touching a dog
(t / touch-01
      :ARG0 (m / mouse)
      :ARG1 (d / dog))

Caption: a dog is touching a mouse
# ::snt a dog is touching a mouse
(t / touch-01
      :ARG0 (d / dog)
      :ARG1 (m / mouse))

Caption: fishing for compliments
# ::snt fishing for compliments
(f / fish-01
      :ARG2 (c / compliment-01))

Caption: compliments for fishing
# ::snt compliments for fishing
(t / thing
      :ARG2-of (c / compliment-01
            :ARG1 (f / fish-01)))

Caption: that person dusting off their hands
# ::snt that person dusting off their hands
(d / dust-off-02
      :ARG0 (p / person
            :mod (t / that)
            :part (h / hand))
      :ARG1 h)

Caption: that person hands off their dusting
# ::snt that person hands off their dusting
(h / hand-off-02
      :ARG0 (p / person
            :mod (t / that))
      :ARG1 (d / dust-01
            :ARG0 p))

Caption: a person wearing black shoes cleaning a bookshelf with an orange duster while a person wearing green shoes drinks wine from an orange glass and relaxes
# ::snt a person wearing black shoes cleaning a bookshelf with an orange duster while a person wearing green shoes drinks wine from an orange glass and relaxes
(c / contrast-01
      :ARG1 (c2 / clean-01
            :ARG0 (p / person
                  :ARG0-of (w / wear-01
                        :ARG1 (s / shoe
                              :ARG1-of (b / black-04))))
            :ARG1 (s2 / shelf
                  :mod (b2 / book))
            :instrument (d / duster
                  :mod (o / orange)))
      :ARG2 (a / and
            :op1 (d2 / drink-01
                  :ARG0 (p2 / person
                        :ARG0-of (w2 / wear-01
                              :ARG1 (s3 / shoe
                                    :ARG1-of (g / green-02))))
                  :ARG1 (w3 / wine)
                  :ARG2 (g2 / glass
                        :mod (o2 / orange)))
            :op2 (r / relax-01
                  :ARG1 p2)))

Caption: a person wearing green shoes cleaning a bookshelf with an orange duster while a person wearing black shoes drinks wine from an orange glass and relaxes
# ::snt a person wearing green shoes cleaning a bookshelf with an orange duster while a person wearing black shoes drinks wine from an orange glass and relaxes
(c / contrast-01
      :ARG1 (c2 / clean-01
            :ARG0 (p / person
                  :ARG0-of (w / wear-01
                        :ARG1 (s / shoe
                              :ARG1-of (g / green-02))))
            :ARG1 (s2 / shelf
                  :mod (b / book))
            :instrument (d / duster
                  :mod (o / orange)))
      :ARG2 (a / and
            :op1 (d2 / drink-01
                  :ARG0 (p2 / person
                        :ARG0-of (w2 / wear-01
                              :ARG1 (s3 / shoe
                                    :ARG1-of (b2 / black-04))))
                  :ARG1 (w3 / wine)
                  :ARG2 (g2 / glass
                        :mod (o2 / orange)))
            :op2 (r / relax-01
                  :ARG1 p2)))

Caption: a person with short hair is happily ironing a light blue shirt while a person with long hair sits on a white couch
# ::snt a person with short hair is happily ironing a light blue shirt while a person with long hair sits on a white couch
(c / contrast-01
      :ARG1 (ii / iron-02
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :ARG1-of (s / short-07))))
            :ARG1 (s2 / shirt
                  :mod (b / blue
                        :ARG1-of (l / light-06)))
            :ARG0-of (h3 / happy-01))
      :ARG2 (s3 / sit-01
            :ARG1 (p2 / person
                  :ARG0-of (h4 / have-03
                        :ARG1 (h5 / hair
                              :ARG1-of (l2 / long-03))))
            :ARG2 (c2 / couch
                  :ARG1-of (w / white-03))))

Caption: a person with long hair is happily ironing a light blue shirt while a person with short hair sits on a white couch
# ::snt a person with long hair is happily ironing a light blue shirt while a person with short hair sits on a white couch
(c / contrast-01
      :ARG1 (ii / iron-02
            :ARG0 (p / person
                  :ARG0-of (h / have-03
                        :ARG1 (h2 / hair
                              :ARG1-of (l / long-03))))
            :ARG1 (s / shirt
                  :mod (b / blue)
                  :ARG1-of (l2 / light-07))
            :ARG0-of (h3 / happy-01))
      :ARG2 (s2 / sit-01
            :ARG1 (p2 / person
                  :ARG0-of (h4 / have-03
                        :ARG1 (h5 / hair
                              :ARG1-of (s3 / short-07))))
            :ARG2 (c2 / couch
                  :ARG1-of (w / white-03))))

Caption: yellow duck shoes on
# ::snt yellow duck shoes on
(o / on-01
      :ARG1 (s / shoe
            :mod (d / duck)
            :ARG1-of (y / yellow-02)))

Caption: yellow duck on shoes
# ::snt yellow duck on shoes
(d / duck
      :ARG1-of (y / yellow-02)
      :location (s / shoe))

Caption: child in front facing row of yellow rubber ducks
# ::snt child in front facing row of yellow rubber ducks
(c / child
      :location (f / front
            :ARG0-of (f2 / face-01
                  :ARG1 (r / row
                        :consist-of (d / duck
                              :mod (r2 / rubber)
                              :ARG1-of (y / yellow-02))))))

Caption: front facing child in row of yellow rubber ducks
# ::snt front facing child in row of yellow rubber ducks
(c / child
      :location (r / row
            :consist-of (d / duck
                  :ARG1-of (y / yellow-02)
                  :consist-of (r2 / rubber)))
      :ARG0-of (f / face-01
            :mod (f2 / front)))

Caption: a bird cooking a person
# ::snt a bird cooking a person
(c / cook-01
      :ARG0 (b / bird)
      :ARG1 (p / person))

Caption: a person cooking a bird
# ::snt a person cooking a bird
(c / cook-01
      :ARG0 (p / person)
      :ARG1 (b / bird))

Caption: a person wearing yellow and a person wearing stripes jumping
# ::snt a person wearing yellow and a person wearing stripes jumping
(a / and
      :op1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (y / yellow)))
      :op2 (p2 / person
            :ARG0-of (w2 / wear-01
                  :ARG1 (s / stripe))
            :ARG0-of (j / jump-03)))

Caption: a jumping person wearing yellow and a person wearing stripes
# ::snt a jumping person wearing yellow and a person wearing stripes
(a / and
      :op1 (p / person
            :ARG0-of (j / jump-03)
            :ARG0-of (w / wear-01
                  :ARG1 (y / yellow)))
      :op2 (p2 / person
            :ARG0-of (w2 / wear-01
                  :ARG1 (s / stripe))))

Caption: a person wearing yellow with their feet in the air and a person wearing stripes
# ::snt a person wearing yellow with their feet in the air and a person wearing stripes
(a / and
      :op1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (y / yellow)
                  :manner (f / foot
                        :location (a2 / air)
                        :part-of p)))
      :op2 (p2 / person
            :ARG0-of (w2 / wear-01
                  :ARG1 (s / stripe))))

Caption: a person wearing stripes with their feet in the air and a person wearing yellow
# ::snt a person wearing stripes with their feet in the air and a person wearing yellow
(a / and
      :op1 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s / stripe)
                  :manner (f / foot
                        :location (a2 / air)
                        :part-of p)))
      :op2 (p2 / person
            :ARG0-of (w2 / wear-01
                  :ARG1 (y / yellow))))

Caption: darker things become light in stripes
# ::snt darker things become light in stripes
(b / become-01
      :ARG1 (t / thing
            :ARG1-of (h / have-degree-91
                  :ARG2 (d / dark-02
                        :ARG1 t)
                  :ARG3 (m / more)))
      :ARG2 (t2 / thing
            :ARG1-of (l / light-07))
      :manner (s / stripe))

Caption: light things in stripes become darker
# ::snt light things in stripes become darker
(b / become-01
      :ARG1 (t / thing
            :ARG1-of (l / light-07)
            :ARG1-of (s / stripe-01))
      :ARG2 (d / dark-02
            :ARG1 t
            :ARG2-of (h / have-degree-91
                  :ARG1 t
                  :ARG3 (m / more))))

Caption: together hammering something
# ::snt together hammering something
(h / hammer-01
      :ARG1 (s / something)
      :manner (t / together))

Caption: hammering something together
# ::snt hammering something together
(h / hammer-01
      :ARG1 (s / something)
      :mod (t / together))

Caption: A person sits next to a baby using an orange screwdriver to assemble a white piece of furniture
# ::snt A person sits next to a baby using an orange screwdriver to assemble a white piece of furniture
(s / sit-01
      :ARG1 (p / person
            :ARG0-of (u / use-01
                  :ARG1 (s2 / screwdriver
                        :mod (o / orange))
                  :ARG2 (a / assemble-02
                        :ARG0 p
                        :ARG1 (p2 / piece
                              :part-of (f / furniture)
                              :ARG1-of (w / white-03)))))
      :ARG2 (n / next-to
            :op1 (b / baby)))

Caption: A baby sits next to a person using an orange screwdriver to assemble a white piece of furniture
# ::snt A baby sits next to a person using an orange screwdriver to assemble a white piece of furniture
(s / sit-01
      :ARG1 (b / baby)
      :ARG2 (n / next-to
            :op1 (p / person
                  :ARG0-of (u / use-01
                        :ARG1 (s2 / screwdriver
                              :mod (o / orange))
                        :ARG2 (a / assemble-02
                              :ARG0 p
                              :ARG1 (p2 / piece
                                    :part-of (f / furniture)
                                    :ARG1-of (w / white-03)))))))

Caption: a worker in a yellow hat uses a drill to the left of where the opening in the wall is
# ::snt a worker in a yellow hat uses a drill to the left of where the opening in the wall is
(u / use-01
      :ARG0 (p / person
            :ARG0-of (w / work-01)
            :ARG0-of (w2 / wear-01
                  :ARG1 (h / hat
                        :ARG1-of (y / yellow-02))))
      :ARG1 (d / drill)
      :location (r / relative-position
            :op1 (o / open-01
                  :ARG1 (w3 / wall))
            :direction (l / left-20)))

Caption: the opening in the wall is to the left of where a worker in a yellow hat uses a drill
# ::snt the opening in the wall is to the left of where a worker in a yellow hat uses a drill
(b / be-located-at-91
      :ARG1 (o / open-01
            :ARG1 (w / wall))
      :ARG2 (r / relative-position
            :op1 (l / location
                  :location-of (u / use-01
                        :ARG0 (p / person
                              :ARG0-of (w2 / work-01)
                              :ARG0-of (w3 / wear-01
                                    :ARG1 (h / hat
                                          :ARG1-of (y / yellow-02))))
                        :ARG1 (d / drill)))
            :direction (l2 / left-20)))

Caption: A small animal with curled hair
# ::snt A small animal with curled hair
(a / animal
      :mod (s / small)
      :ARG0-of (h / have-03
            :ARG1 (h2 / hair
                  :ARG1-of (c / curl-01))))

Caption: A curled small animal with hair
# ::snt A curled small animal with hair
(a / animal
      :mod (s / small)
      :ARG1-of (c / curl-01)
      :part (h / hair))

Caption: A right hand pulls a glove onto a left hand
# ::snt A right hand pulls a glove onto a left hand
(p / pull-01
      :ARG0 (h / hand
            :ARG1-of (r / right-04))
      :ARG1 (g / glove)
      :ARG2 (h2 / hand
            :ARG1-of (l / left-20)))

Caption: A left hand pulls a glove onto a right hand
# ::snt A left hand pulls a glove onto a right hand
(p / pull-01
      :ARG0 (h / hand
            :ARG1-of (l / left-20))
      :ARG1 (g / glove)
      :ARG2 (h2 / hand
            :ARG1-of (r / right-04)))

Caption: A dog and a person with their feet hanging out of a car window
# ::snt A dog and a person with their feet hanging out of a car window
(a / and
      :op1 (d / dog)
      :op2 (p / person
            :part (f / foot)
            :ARG0-of (h / hang-01
                  :ARG2 (w / window
                        :part-of (c / car))
                  :direction (o / out))))

Caption: A dog with their feet hanging out of a car window and a person
# ::snt A dog with their feet hanging out of a car window and a person
(a / and
      :op1 (d / dog
            :part (f / foot
                  :ARG1-of (h / hang-01
                        :ARG2 (w / window
                              :part-of (c / car))
                        :direction (o / out))))
      :op2 (p / person))

Caption: A person whispering into a dog's ear
# ::snt A person whispering into a dog's ear
(w / whisper-01
      :ARG0 (p / person)
      :ARG2 (e / ear
            :part-of (d / dog)))

Caption: A dog whispering into a person's ear
# ::snt A dog whispering into a person's ear
(w / whisper-01
      :ARG0 (d / dog)
      :ARG2 (e / ear
            :part-of (p / person)))

Caption: one ear that some donkey is whispering a secret into
# ::snt one ear that some donkey is whispering a secret into
(e / ear
      :quant 1
      :ARG2-of (w / whisper-01
            :ARG0 (d / donkey
                  :mod (s / some))
            :ARG1 (s2 / secret)))

Caption: donkey ear that some one is whispering a secret into
# ::snt donkey ear that some one is whispering a secret into
(e / ear
      :mod (d / donkey)
      :ARG2-of (w / whisper-01
            :ARG0 (s / someone)
            :ARG1 (s2 / secret)))

Caption: walking someone cut lines into green plants
# ::snt walking someone cut lines into green plants
(c / cut-line-07
      :ARG0 (s / someone)
      :ARG3 (p / plant
            :ARG1-of (g / green-02))
      :time (w / walk-01
            :ARG0 s))

Caption: someone walking lines cut into green plants
# ::snt someone walking lines cut into green plants
(c / cut-02
      :ARG0 (l / line
            :mod (w / walk-01
                  :ARG0 (s / someone)))
      :ARG1 (p / plant
            :ARG1-of (g / green-02)))

Caption: a volcano above water makes steam
# ::snt a volcano above water makes steam
(m / make-01
      :ARG0 (v / volcano
            :location (a / above
                  :op1 (w / water)))
      :ARG1 (s / steam))

Caption: water above a volcano makes steam
# ::snt water above a volcano makes steam
(m / make-01
      :ARG0 (w / water
            :location (a / above
                  :op1 (v / volcano)))
      :ARG1 (s / steam))

Caption: A child riding a bike and an adult
# ::snt A child riding a bike and an adult
(a / and
      :op1 (c / child
            :ARG0-of (r / ride-01
                  :ARG1 (b / bike)))
      :op2 (a2 / adult))

Caption: A child and an adult riding a bike
# ::snt A child and an adult riding a bike
(r / ride-01
      :ARG0 (a / and
            :op1 (c / child)
            :op2 (a2 / adult))
      :ARG1 (b / bike))

Caption: an adult putting a helmet on a child
# ::snt an adult putting a helmet on a child
(p / put-01
      :ARG0 (a / adult)
      :ARG1 (h / helmet)
      :ARG2 (c / child))

Caption: a child putting a helmet on an adult
# ::snt a child putting a helmet on an adult
(p / put-01
      :ARG0 (c / child)
      :ARG1 (h / helmet)
      :ARG2 (a / adult))

Caption: An adult wearing purple lying next to a child
# ::snt An adult wearing purple lying next to a child
(l / lie-07
      :ARG1 (a / adult
            :ARG0-of (w / wear-01
                  :ARG1 (p / purple)))
      :ARG2 (n / next-to
            :op1 (c / child)))

Caption: An adult lying next to a child wearing purple
# ::snt An adult lying next to a child wearing purple
(l / lie-07
      :ARG1 (a / adult)
      :ARG2 (n / next-to
            :op1 (c / child
                  :ARG0-of (w / wear-01
                        :ARG1 (p / purple)))))

Caption: a fencer who is wearing black pants having a point scored against them by another fencer using a wheelchair
# ::snt a fencer who is wearing black pants having a point scored against them by another fencer using a wheelchair
(h / have-03
      :ARG0 (f / fencer
            :ARG0-of (w / wear-01
                  :ARG1 (p / pants
                        :ARG1-of (b / black-04))))
      :ARG1 (p2 / point
            :ARG1-of (s / score-01
                  :ARG0 (f2 / fencer
                        :mod (a / another)
                        :ARG0-of (u / use-01
                              :ARG1 (w2 / wheelchair)))
                  :ARG2 f)))

Caption: a fencer having a point scored against them by another fencer who is wearing black pants using a wheelchair
# ::snt a fencer having a point scored against them by another fencer who is wearing black pants using a wheelchair
(h / have-04
      :ARG0 (f / fencer)
      :ARG1 (s / score-01
            :ARG0 (f2 / fencer
                  :mod (a / another)
                  :ARG0-of (w / wear-01
                        :ARG1 (p / pants
                              :ARG1-of (b / black-04)))
                  :ARG0-of (u / use-01
                        :ARG1 (w2 / wheelchair)))
            :ARG1 (p2 / point)
            :ARG2 (t / they)))

Caption: a person with long braids is exercising in front of a person without braids
# ::snt a person with long braids is exercising in front of a person without braids
(e / exercise-02
      :ARG0 (p / person
            :ARG0-of (h / have-03
                  :ARG1 (b / braid
                        :ARG1-of (l / long-03))))
      :location (ii / in-front-of
            :op1 (p2 / person
                  :ARG0-of (h2 / have-03
                        :polarity -
                        :ARG1 (b2 / braird)))))

Caption: a person without braids is exercising in front of a person with long braids
# ::snt a person without braids is exercising in front of a person with long braids
(e / exercise-02
      :ARG0 (p / person
            :ARG0-of (h / have-03
                  :polarity -
                  :ARG1 (b / bra)))
      :location (ii / in-front-of
            :op1 (p2 / person
                  :ARG0-of (h2 / have-03
                        :ARG1 (b2 / bra
                              :ARG1-of (l / long-03))))))

Caption: in the stadium, the person wearing gray outperformed the one wearing blue
# ::snt in the stadium, the person wearing gray outperformed the one wearing blue
(o / outperform-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (g / gray)))
      :ARG1 (p2 / person
            :ARG0-of (w2 / wear-01
                  :ARG1 (b / blue)))
      :location (s / stadium))

Caption: in the stadium, the person wearing blue outperformed the one wearing gray
# ::snt in the stadium, the person wearing blue outperformed the one wearing gray
(o / outperform-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (b / blue)))
      :ARG1 (p2 / person
            :ARG0-of (w2 / wear-01
                  :ARG1 (g / gray)))
      :location (s / stadium))

Caption: butchering white meat while wearing yellow but not red
# ::snt butchering white meat while wearing yellow but not red
(b / butcher-01
      :ARG1 (m / meat
            :ARG1-of (w / white-03))
      :time (c / contrast-01
            :ARG1 (w2 / wear-01
                  :ARG1 (y / yellow))
            :ARG2 (w3 / wear-01
                  :polarity -
                  :ARG1 (r / red-02))))

Caption: butchering red meat while wearing white but not yellow
# ::snt butchering red meat while wearing white but not yellow
(b / butcher-01
      :ARG1 (m / meat
            :ARG1-of (r / red-02))
      :time (c / contrast-01
            :ARG1 (w / wear-01
                  :ARG1 (w2 / white-03))
            :ARG2 (w3 / wear-01
                  :polarity -
                  :ARG1 (y / yellow))))

Caption: a child with a fake beard and an adult
# ::snt a child with a fake beard and an adult
(a / and
      :op1 (c / child
            :ARG0-of (h / have-03
                  :ARG1 (b / beard
                        :ARG1-of (f / fake-02))))
      :op2 (a2 / adult))

Caption: an adult with a fake beard and a child
# ::snt an adult with a fake beard and a child
(a / and
      :op1 (a2 / adult
            :poss-of (b / beard
                  :ARG1-of (f / fake-02)))
      :op2 (c / child))

Caption: on halloween, a child dressed as an insect is to the right of a child dressed as a mammal
# ::snt on halloween, a child dressed as an insect is to the right of a child dressed as a mammal
(b / be-located-at-91
      :ARG1 (c / child
            :ARG1-of (d / dress-01
                  :ARG2 (ii / insect)))
      :ARG2 (r / relative-position
            :op1 (c2 / child
                  :ARG1-of (d2 / dress-01
                        :ARG2 (m / mammal)))
            :direction (r2 / right))
      :time (f / festival
            :name (n / name
                  :op1 "Halloween")))

Caption: on halloween, a child dressed as a mammal is to the right of a child dressed as an insect
# ::snt on halloween, a child dressed as a mammal is to the right of a child dressed as an insect
(b / be-located-at-91
      :ARG1 (c / child
            :ARG1-of (d / dress-01
                  :ARG2 (m / mammal)))
      :ARG2 (r / relative-position
            :op1 (c2 / child
                  :ARG1-of (d2 / dress-01
                        :ARG2 (ii / insect)))
            :direction (r2 / right))
      :time (f / festival
            :name (n / name
                  :op1 "Halloween")))

Caption: a modern office complex with many windows above a nicely landscaped lawn
# ::snt a modern office complex with many windows above a nicely landscaped lawn
(c / complex
      :mod (o / office)
      :ARG1-of (m / modern-02)
      :location (a / above
            :op1 (l / lawn
                  :ARG1-of (l2 / landscape-01
                        :ARG1-of (n / nice-01))))
      :ARG0-of (h / have-03
            :ARG1 (w / window
                  :quant (m2 / many))))

Caption: a nicely landscaped lawn above a modern office complex with many windows
# ::snt a nicely landscaped lawn above a modern office complex with many windows
(l / lawn
      :ARG1-of (l2 / landscape-01
            :ARG1-of (n / nice-01))
      :location (a / above
            :op1 (c / complex
                  :mod (o / office)
                  :ARG1-of (m / modern-02)
                  :part (w / window
                        :quant (m2 / many)))))

Caption: a tree is partially inside a parked car
# ::snt a tree is partially inside a parked car
(t / tree
      :location (ii / inside
            :op1 (c / car
                  :ARG1-of (p / park-01)))
      :degree (p2 / part))

Caption: a parked car is partially inside a tree
# ::snt a parked car is partially inside a tree
(b / be-located-at-91
      :ARG1 (c / car
            :ARG1-of (p / park-01))
      :ARG2 (ii / inside
            :op1 (t / tree))
      :degree (p2 / part))

Caption: some are parking in a train
# ::snt some are parking in a train
(p / park-01
      :ARG0 (p2 / person
            :quant (s / some))
      :ARG1 (t / train))

Caption: some are training in a park
# ::snt some are training in a park
(t / train-01
      :ARG2 (p / person
            :quant (s / some))
      :location (p2 / park))

Caption: an athlete running on water
# ::snt an athlete running on water
(a / athlete
      :ARG0-of (r / run-02
            :ARG1 (w / water)))

Caption: water running on an athlete
# ::snt water running on an athlete
(r / run-01
      :ARG1 (w / water)
      :prep-on (a / athlete))

Caption: a horse getting wet
# ::snt a horse getting wet
(w / wet-01
      :ARG1 (h / horse))

Caption: getting a horse wet
# ::snt getting a horse wet
(g / get-04
      :polarity (a / amr-unknown)
      :ARG1 (w / wet-01
            :ARG1 (h / horse)))

Caption: the glasses full of water are above the person's head and leg
# ::snt the glasses full of water are above the person's head and leg
(b / be-located-at-91
      :ARG1 (g / glass
            :ARG1-of (f / fill-01
                  :ARG2 (w / water)))
      :ARG2 (a / above
            :op1 (a2 / and
                  :op1 (h / head
                        :part-of (p / person
                              :part (l / leg)))
                  :op2 l)))

Caption: the person's head and leg are above the glasses full of water
# ::snt the person's head and leg are above the glasses full of water
(b / be-located-at-91
      :ARG1 (a / and
            :op1 (h / head)
            :op2 (l / leg)
            :part-of (p / person))
      :ARG2 (a2 / above
            :op1 (g / glass
                  :ARG1-of (f / full-09
                        :ARG2 (w / water)))))

Caption: a person is touching the head of a squirrel
# ::snt a person is touching the head of a squirrel
(t / touch-01
      :ARG0 (p / person)
      :ARG1 (h / head
            :part-of (s / squirrel)))

Caption: a squirrel is touching the head of a person
# ::snt a squirrel is touching the head of a person
(t / touch-01
      :ARG0 (s / squirrel)
      :ARG1 (h / head
            :part-of (p / person)))

Caption: a deer's nose is resting on a child's hand
# ::snt a deer's nose is resting on a child's hand
(r / rest-01
      :ARG1 (n / nose
            :part-of (d / deer))
      :ARG2 (h / hand
            :part-of (c / child)))

Caption: a child's hand is resting on a deer's nose
# ::snt a child's hand is resting on a deer's nose
(r / rest-01
      :ARG1 (h / hand
            :part-of (c / child))
      :ARG2 (n / nose
            :part-of (d / deer)))

Caption: two sparklers for one hand
# ::snt two sparklers for one hand
(s / sparkler
      :quant 2
      :prep-for (h / hand
            :quant 1))

Caption: one sparkler for two hands
# ::snt one sparkler for two hands
(s / sparkler
      :quant 1
      :beneficiary (h / hand
            :quant 2))

Caption: an animal giving a person food
# ::snt an animal giving a person food
(g / give-01
      :ARG0 (a / animal)
      :ARG1 (f / food)
      :ARG2 (p / person))

Caption: a person giving an animal food
# ::snt a person giving an animal food
(p / person
      :ARG0-of (g / give-01
            :ARG1 (f / food)
            :ARG2 (a / animal)))

Caption: a spider towering over a dog
# ::snt a spider towering over a dog
(t / tower-01
      :ARG0 (s / spider)
      :ARG1 (o / over
            :op1 (d / dog)))

Caption: a dog towering over a spider
# ::snt a dog towering over a spider
(t / tower-01
      :ARG0 (d / dog)
      :ARG1 (o / over
            :op1 (s / spider)))

Caption: a car going into a hollow tube
# ::snt a car going into a hollow tube
(g / go-01
      :ARG1 (c / car)
      :ARG4 (t / tube
            :mod (h / hollow)))

Caption: a hollow tube going into a car
# ::snt a hollow tube going into a car
(t / tube
      :mod (h / hollow)
      :ARG1-of (g / go-01
            :ARG4 (c / car)))

Caption: two people wearing clothes of the same colors are on different side of the tennis net
# ::snt two people wearing clothes of the same colors are on different side of the tennis net
(b / be-located-at-91
      :ARG1 (p / person
            :quant 2
            :ARG0-of (w / wear-01
                  :ARG1 (c / clothes
                        :ARG1-of (c2 / color-01
                              :ARG1-of (s / same-01)))))
      :ARG2 (s2 / side
            :ARG1-of (d / differ-02)
            :part-of (n / net
                  :mod (t / tennis))))

Caption: two people wearing clothes of different colors are on the same side of the tennis net
# ::snt two people wearing clothes of different colors are on the same side of the tennis net
(b / be-located-at-91
      :ARG1 (p / person
            :quant 2
            :ARG0-of (w / wear-01
                  :ARG1 (c / clothes
                        :ARG1-of (c2 / color-01
                              :ARG1-of (d / differ-02)))))
      :ARG2 (s / side
            :ARG1-of (s2 / same-01)
            :part-of (n / net
                  :mod (t / tennis))))

Caption: living things drinking
# ::snt living things drinking
(a / and
      :op1 (l / live-01
            :ARG1 (t / thing))
      :op2 (d / drink-01
            :ARG1 t))

Caption: drinking living things
# ::snt drinking living things
(d / drink-01
      :ARG1 (t / thing
            :ARG0-of (l / live-01)))

Caption: a person near water using a lasso
# ::snt a person near water using a lasso
(p / person
      :ARG1-of (n / near-02
            :ARG2 (w / water))
      :ARG0-of (u / use-01
            :ARG1 (l / lasso)))

Caption: near a person using a water lasso
# ::snt near a person using a water lasso
(n / near-02
      :ARG2 (p / person
            :ARG0-of (u / use-01
                  :ARG1 (l / lasso
                        :mod (w / water)))))

Caption: a person spraying water on someone else and a person on a bike
# ::snt a person spraying water on someone else and a person on a bike
(a / and
      :op1 (s / spray-01
            :ARG0 (p / person)
            :ARG1 (w / water)
            :ARG2 (s2 / someone
                  :mod (e / else)))
      :op2 (p2 / person
            :location (b / bike)))

Caption: a person spraying water on a person on a bike and someone else
# ::snt a person spraying water on a person on a bike and someone else
(s / spray-01
      :ARG0 (p / person)
      :ARG1 (w / water)
      :ARG2 (a / and
            :op1 (p2 / person
                  :location (b / bike))
            :op2 (s2 / someone
                  :mod (e / else))))

Caption: a person stretching behind a brown dog
# ::snt a person stretching behind a brown dog
(p / person
      :ARG1-of (s / stretch-01
            :ARG2 (b / behind
                  :op1 (d / dog
                        :ARG1-of (b2 / brown-02)))))

Caption: a brown dog stretching behind a person
# ::snt a brown dog stretching behind a person
(d / dog
      :ARG1-of (b / brown-02)
      :ARG1-of (s / stretch-01
            :ARG2 (b2 / behind
                  :op1 (p / person))))

Caption: a person carrying more than one flotation device
# ::snt a person carrying more than one flotation device
(p / person
      :ARG0-of (c / carry-01
            :ARG1 (d / device
                  :purpose (f / flotation)
                  :quant (m / more-than
                        :op1 1))))

Caption: more than one flotation device carrying a person
# ::snt more than one flotation device carrying a person
(c / carry-01
      :ARG0 (d / device
            :purpose (f / float-01)
            :quant (m / more-than
                  :op1 1))
      :ARG1 (p / person))

Caption: two kids on a pool floatie and one kid swimming
# ::snt two kids on a pool floatie and one kid swimming
(a / and
      :op1 (f / float-01
            :ARG1 (k / kid
                  :quant 2)
            :ARG2 (p / pool))
      :op2 (s / swim-01
            :ARG0 (k2 / kid
                  :quant 1)))

Caption: one kid on a pool floatie and two kids swimming
# ::snt one kid on a pool floatie and two kids swimming
(a / and
      :op1 (k / kid
            :quant 1
            :prep-on (f / floatie
                  :mod (p / pool)))
      :op2 (k2 / kid
            :quant 2
            :ARG0-of (s / swim-01)))

Caption: gears for moving something
# ::snt gears for moving something
(g / gee
      :purpose (m / move-01
            :ARG1 (s / something)))

Caption: moving gears for something
# ::snt moving gears for something
(m / move-01
      :ARG1 (g / gear)
      :purpose (s / something))

Caption: looking from above at a collection of similar objects below
# ::snt looking from above at a collection of similar objects below
(l / look-01
      :ARG1 (c / collect-01
            :ARG1 (o / object
                  :ARG1-of (r / resemble-01))
            :location (b / below))
      :source (a / above))

Caption: looking from below at a collection of similar objects above
# ::snt looking from below at a collection of similar objects above
(l / look-01
      :ARG1 (c / collect-01
            :ARG1 (o / object
                  :ARG1-of (r / resemble-01))
            :location (a / above))
      :manner (f / from
            :op1 (b / below)))

Caption: a toy herbivore stands on top of at least one toy carnivore
# ::snt a toy herbivore stands on top of at least one toy carnivore
(s / stand-01
      :ARG1 (h / herbivore
            :mod (t / toy))
      :ARG2 (t2 / top
            :op1 (c / carnivore
                  :mod (t3 / toy)
                  :quant (a / at-least
                        :op1 1))))

Caption: at least one toy herbivore stands on top of a toy carnivore
# ::snt at least one toy herbivore stands on top of a toy carnivore
(s / stand-01
      :ARG1 (h / herbivore
            :quant (a / at-least
                  :op1 1)
            :mod (t / toy))
      :ARG2 (t2 / top
            :op1 (c / carnivore
                  :mod (t3 / toy))))

Caption: a person supports a small chair
# ::snt a person supports a small chair
(s / support-01
      :ARG0 (p / person)
      :ARG1 (c / chair
            :mod (s2 / small)))

Caption: a chair supports a small person
# ::snt a chair supports a small person
(s / support-01
      :ARG0 (c / chair)
      :ARG1 (p / person
            :mod (s2 / small)))

Caption: a person smiles at another person wearing a checked shirt who is hitting a ping pong ball
# ::snt a person smiles at another person wearing a checked shirt who is hitting a ping pong ball
(s / smile-01
      :ARG0 (p / person)
      :ARG2 (p2 / person
            :mod (a / another)
            :ARG0-of (h / hit-01
                  :ARG1 (b / ball
                        :mod (p3 / ping-pong)))
            :ARG0-of (w / wear-01
                  :ARG1 (s2 / shirt
                        :ARG1-of (c / check-01)))))

Caption: a person wearing a checked shirt smiles at another person who is hitting a ping pong ball
# ::snt a person wearing a checked shirt smiles at another person who is hitting a ping pong ball
(s / smile-01
      :ARG0 (p / person
            :ARG0-of (w / wear-01
                  :ARG1 (s2 / shirt
                        :ARG1-of (c / check-03))))
      :ARG2 (p2 / person
            :mod (a / another)
            :ARG0-of (h / hit-01
                  :ARG1 (b / ball
                        :mod (p3 / ping-pong)))))

Caption: two versions of one person
# ::snt two versions of one person
(v / version
      :quant 2
      :mod (p / person
            :quant 1))

Caption: one version of two persons
# ::snt one version of two persons
(v / version
      :quant 1
      :mod (p / person
            :quant 2))

Caption: There are not pink flowers below the bird with yellow head feathers
# ::snt There are not pink flowers below the bird with yellow head feathers
(f / flower
      :polarity -
      :ARG1-of (p / pink-04)
      :location (b / below
            :op1 (b2 / bird
                  :ARG0-of (h / have-03
                        :ARG1 (f2 / feather
                              :mod (y / yellow)
                              :location (h2 / head))))))

Caption: There are pink flowers not below the bird with yellow head feathers
# ::snt There are pink flowers not below the bird with yellow head feathers
(f / flower
      :ARG1-of (p / pink-04)
      :location (b / below
            :op1 (b2 / bird
                  :ARG0-of (h / have-03
                        :ARG1 (f2 / feather
                              :mod (y / yellow)
                              :location (h2 / head))))))

Caption: In a shopping cart, there are two animals that are the same species but are looking in different directions
# ::snt In a shopping cart, there are two animals that are the same species but are looking in different directions
(c / contrast-01
      :ARG1 (s / species
            :quant 2
            :ARG1-of (s2 / same-01)
            :domain (a / animal))
      :ARG2 (l / look-01
            :ARG0 a
            :direction (d / direction
                  :ARG1-of (d2 / differ-02)))
      :location (c2 / cart
            :purpose (s3 / shop-01)))

Caption: In a shopping cart, there are two animals that are the different species but are looking in same directions
# ::snt In a shopping cart, there are two animals that are the different species but are looking in same directions
(c / contrast-01
      :ARG1 (a / animal
            :quant 2
            :mod (s / species
                  :ARG1-of (d / differ-02))
            :location (c2 / cart
                  :purpose (s2 / shop-01)))
      :ARG2 (l / look-01
            :ARG0 a
            :direction (d2 / direction
                  :ARG1-of (s3 / same-01))))

Caption: water is on and under a vessel
# ::snt water is on and under a vessel
(a / and
      :op1 (o / on-01
            :ARG1 (w / water))
      :op2 (u / under
            :op1 (v / vessel)))

Caption: a vessel is on and under water
# ::snt a vessel is on and under water
(a / and
      :op1 (o / on-01
            :ARG1 (v / vessel))
      :op2 (u / under
            :op1 (w / water)))

Caption: two bodies share with one head
# ::snt two bodies share with one head
(s / share-01
      :ARG0 (b / body
            :quant 2)
      :ARG1 (h / head
            :quant 1))

Caption: one bodies share with two head
# ::snt one bodies share with two head
(s / share-01
      :ARG0 (b / body
            :quant 1)
      :ARG1 (h / head
            :quant 2))

Caption: The worker wears something striped over a white undershirt with a collar
# ::snt The worker wears something striped over a white undershirt with a collar
(w / wear-01
      :ARG0 (p / person
            :ARG0-of (w2 / work-01))
      :ARG1 (s / something
            :ARG1-of (s2 / stripe-01)
            :location (o / over
                  :op1 (u / undershirt
                        :ARG1-of (w3 / white-03)
                        :ARG0-of (h / have-03
                              :ARG1 (c / collar))))))

Caption: The worker wears something white over a striped undershirt with a collar
# ::snt The worker wears something white over a striped undershirt with a collar
(w / wear-01
      :ARG0 (p / person
            :ARG0-of (w2 / work-01))
      :ARG1 (s / something
            :ARG1-of (w3 / white-03)
            :ARG1-of (ii / instead-of-91
                  :ARG2 (u / undershirt
                        :ARG1-of (s2 / stripe-01)
                        :ARG0-of (h / have-03
                              :ARG1 (c / collar))))))

Caption: A person seen from above has a grid below them
# ::snt A person seen from above has a grid below them
(h / have-03
      :ARG0 (p / person
            :ARG1-of (s / see-01
                  :manner (a / above)))
      :ARG1 (g / grid
            :location (b / below
                  :op1 p)))

Caption: A person seen from below has a grid above them
# ::snt A person seen from below has a grid above them
(h / have-03
      :ARG0 (p / person
            :ARG1-of (s / see-01
                  :source (b / below)))
      :ARG1 (g / grid
            :location (a / above
                  :op1 p)))

Caption: head in the clouds
# ::snt head in the clouds
(h / head
      :location (c / cloud))

Caption: clouds in the head
# ::snt clouds in the head
(c / cloud
      :location (h / head))

Caption: standing on feet
# ::snt standing on feet
(s / stand-01
      :manner (f / foot))

Caption: on feet standing
# ::snt on feet standing
(s / stand-01
      :ARG1 (p / person
            :part (f / foot)))

Caption: They have sunglasses over their hair
# ::snt They have sunglasses over their hair
(h / have-03
      :ARG0 (t / they
            :part (h2 / hair))
      :ARG1 (s / sunglasses)
      :location (o / over
            :op1 h2))

Caption: They have hair over their sunglasses
# ::snt They have hair over their sunglasses
(h / have-03
      :ARG0 (t / they)
      :ARG1 (h2 / hair)
      :location (o / over
            :op1 (s / sunglasses
                  :poss t)))

Caption: an odd number of sweet things on a plate with an even number of sides
# ::snt an odd number of sweet things on a plate with an even number of sides
(t / thing
      :ARG1-of (s / sweet-05)
      :quant (n / number
            :mod (o / odd))
      :location (p / plate
            :ARG0-of (h / have-03
                  :ARG1 (s2 / side
                        :quant (n2 / number
                              :mod (e / even))))))

Caption: an even number of sweet things on a plate with an odd number of sides
# ::snt an even number of sweet things on a plate with an odd number of sides
(t / thing
      :ARG1-of (s / sweet-05)
      :quant (n / number
            :mod (e / even))
      :location (p / plate
            :prep-with (s2 / side
                  :mod (n2 / number
                        :mod (o / odd)))))

Caption: a large living thing in front of a large non-living thing
# ::snt a large living thing in front of a large non-living thing
(b / be-located-at-91
      :ARG1 (t / thing
            :ARG0-of (l / live-01)
            :mod (l2 / large))
      :ARG2 (ii / in-front-of
            :op1 (t2 / thing
                  :ARG0-of (l3 / live-01
                        :polarity -)
                  :mod (l4 / large))))

Caption: a large non-living thing in front of a large living thing
# ::snt a large non-living thing in front of a large living thing
(b / be-located-at-91
      :ARG1 (t / thing
            :mod (l / large)
            :ARG0-of (l2 / live-01
                  :polarity -))
      :ARG2 (ii / in-front-of
            :op1 (t2 / thing
                  :mod (l3 / large)
                  :ARG0-of (l4 / live-01))))

Caption: racing over it
# ::snt racing over it
(r / race-02
      :ARG3 (o / over
            :op1 (ii / it)))

Caption: racing it over
# ::snt racing it over
(r / race-02
      :ARG1 (ii / it)
      :direction (o / over))

Caption: someone is overdoing it
# ::snt someone is overdoing it
(o / overdo-01
      :ARG0 (s / someone)
      :ARG1 (ii / it))

Caption: someone is doing it over
# ::snt someone is doing it over
(d / do-02
      :ARG0 (s / someone)
      :ARG1 (ii / it)
      :mod (o / over))
